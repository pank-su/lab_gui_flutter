--
-- PostgreSQL database dump
--

-- Dumped from database version 15.3
-- Dumped by pg_dump version 15.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO postgres;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA public;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry and geography spatial types and functions';


--
-- Name: jwt_token; Type: TYPE; Schema: auth; Owner: postgres
--

CREATE TYPE auth.jwt_token AS (
	token text
);


ALTER TYPE auth.jwt_token OWNER TO postgres;

--
-- Name: user_info; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.user_info AS (
	login text,
	avatar_url text,
	role text
);


ALTER TYPE public.user_info OWNER TO postgres;

--
-- Name: add_user(text, text, name); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.add_user(login text, pass text, role name) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$

BEGIN

    INSERT INTO auth.users(login, pass, role) VALUES ($1, $2, $3);

END

$_$;


ALTER FUNCTION auth.add_user(login text, pass text, role name) OWNER TO postgres;

--
-- Name: check_role_exists(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.check_role_exists() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

begin

    if not exists (select 1 from pg_roles as r where r.rolname = new.role) then

        raise foreign_key_violation using message =

                    'unknown database role: ' || new.role;

        -- return null;

    end if;

    return new;

end

$$;


ALTER FUNCTION auth.check_role_exists() OWNER TO postgres;

--
-- Name: encrypt_pass(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.encrypt_pass() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

begin

  if tg_op = 'INSERT' or new.pass <> old.pass then

    new.pass = crypt(new.pass, gen_salt('bf'));

  end if;

  return new;

end

$$;


ALTER FUNCTION auth.encrypt_pass() OWNER TO postgres;

--
-- Name: user_role(text, text); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.user_role(login text, pass text) RETURNS name
    LANGUAGE plpgsql
    AS $$

begin

    return (select role

            from auth.users

            where users.login = user_role.login

              and users.pass = crypt(user_role.pass, users.pass));

end;

$$;


ALTER FUNCTION auth.user_role(login text, pass text) OWNER TO postgres;

--
-- Name: add_collection(text, character varying, character varying, character varying, character varying, character varying, text, text, text, public.geography, text, text, text, text, date, text, text[], boolean); Type: FUNCTION; Schema: public; Owner: panksu
--

CREATE FUNCTION public.add_collection(collect_id text DEFAULT NULL::text, "order" character varying DEFAULT NULL::character varying, family character varying DEFAULT NULL::character varying, genus character varying DEFAULT NULL::character varying, kind character varying DEFAULT NULL::character varying, age character varying DEFAULT 'Unknown'::character varying, sex text DEFAULT 'Unknown'::text, vauch_inst text DEFAULT NULL::text, vauch_id text DEFAULT NULL::text, point public.geography DEFAULT NULL::public.geography, country text DEFAULT NULL::text, region text DEFAULT NULL::text, subregion text DEFAULT NULL::text, geocomment text DEFAULT NULL::text, date_collect date DEFAULT NULL::date, comment text DEFAULT NULL::text, collectors text[] DEFAULT '{}'::text[], rna boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
    kind_id_       integer;
    subregion_id_  integer DEFAULT 4;
    collection_id_ integer;
    collector      text[];
    collector_id_  integer;
BEGIN
    kind_id_ := get_kind_id($5, (get_genus_id($4, (get_family_id($3, (get_order_id($2)))))));
    IF ($11 IS NOT NULL) THEN
        subregion_id_ := get_subregion_id($13, (get_region_id($12, (get_country_id($11)))));
    END IF;
    collection_id_ := (SELECT id FROM collection ORDER BY id DESC LIMIT 1);
    INSERT INTO collection("CatalogueNumber", collect_id, kind_id, subregion_id, point, vouch_inst_id, vouch_id, sex_id,
                           age_id, day, month, year, comment, geo_comment, rna)
    VALUES (concat('ZIN-TER-M-', collection_id_), $1, kind_id_, subregion_id_, $10, get_vouch_inst_id($8), $9,
            get_sex_id($7), get_age_id($6),
            extract(day from date_collect), extract(month from date_collect), extract(year from date_collect), $16, $14,
            $18);
    collection_id_ := collection_id_ + 1;
    IF (array_length($17, 1) IS NULL) THEN RETURN;
    END IF;
    FOREACH collector SLICE 1 IN ARRAY $17
        LOOP
            collector_id_ := get_collector_id(collector[1]);
            INSERT INTO collector_to_collection(collector_id, collection_id) VALUES (collector_id_, collection_id_);
        END LOOP;
END
$_$;


ALTER FUNCTION public.add_collection(collect_id text, "order" character varying, family character varying, genus character varying, kind character varying, age character varying, sex text, vauch_inst text, vauch_id text, point public.geography, country text, region text, subregion text, geocomment text, date_collect date, comment text, collectors text[], rna boolean) OWNER TO panksu;

--
-- Name: add_topology(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: panksu
--

CREATE FUNCTION public.add_topology("order" character varying, family character varying DEFAULT NULL::character varying, genus character varying DEFAULT NULL::character varying, kind character varying DEFAULT NULL::character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM (SELECT get_kind_id(kind, get_genus_id(genus, get_family_id(family, get_order_id("order")))));
    RETURN 'ok';
END
$$;


ALTER FUNCTION public.add_topology("order" character varying, family character varying, genus character varying, kind character varying) OWNER TO panksu;

--
-- Name: FUNCTION add_topology("order" character varying, family character varying, genus character varying, kind character varying); Type: COMMENT; Schema: public; Owner: panksu
--

COMMENT ON FUNCTION public.add_topology("order" character varying, family character varying, genus character varying, kind character varying) IS 'Функция для быстрого добавления топологии';


--
-- Name: collectors_test(text[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.collectors_test(collectors text[]) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    collector text[];

    text_ text := '';

    collector_id integer;

BEGIN

    FOREACH collector SLICE 1 IN ARRAY $1

    LOOP

        collector_id := get_collector_id(collector[1]);



    END LOOP;

    RETURN collector_id;

END;

$_$;


ALTER FUNCTION public.collectors_test(collectors text[]) OWNER TO postgres;

--
-- Name: get_age_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_age_id(age_name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    age_id integer;

BEGIN

    SELECT id INTO age_id FROM age WHERE $1 = age.name;

    IF age_id IS NULL THEN

        INSERT INTO age(name) VALUES ($1);

        SELECT id INTO age_id FROM age WHERE $1 = age.name;

    END IF;

    RETURN age_id;

END;

$_$;


ALTER FUNCTION public.get_age_id(age_name character varying) OWNER TO postgres;

--
-- Name: get_collector_id(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_collector_id(last_name character varying, first_name character varying DEFAULT NULL::character varying, second_name character varying DEFAULT NULL::character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    collector_id integer;

BEGIN

    SELECT id

    INTO collector_id

    FROM collector

    WHERE collector.last_name = $1

      AND (collector.first_name = $2  or (collector.first_name is NULL and $2 is NULL))

      AND (collector.second_name = $3 or (collector.second_name is NULL and $3 is NULL));

    IF collector_id IS NULL THEN

        INSERT INTO collector(last_name, first_name, second_name) VALUES ($1, $2, $3);

        SELECT get_collector_id($1, $2, $3) INTO collector_id;

    END IF;

    RETURN collector_id;

END;

$_$;


ALTER FUNCTION public.get_collector_id(last_name character varying, first_name character varying, second_name character varying) OWNER TO postgres;

--
-- Name: get_country_id(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_country_id(name text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    country_id integer;

BEGIN

    SELECT id INTO country_id FROM country WHERE $1 = country.name;

    IF country_id IS NULL THEN

        INSERT INTO country(name) VALUES ($1);

        SELECT get_country_id($1) INTO country_id;

    END IF;

    RETURN country_id;

END;

$_$;


ALTER FUNCTION public.get_country_id(name text) OWNER TO postgres;

--
-- Name: get_family_id(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_family_id(name character varying, order_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    family_id integer;

BEGIN

    SELECT id

    INTO family_id

    FROM family

    WHERE ($1 = family.name OR ($1 is NULL AND family.name is null))

      AND $2 = family.order_id;

    IF family_id IS NULL THEN

        INSERT INTO family(name, order_id) VALUES ($1, $2);

        SELECT get_family_id($1, $2) INTO family_id;

    END IF;

    RETURN family_id;

END;

$_$;


ALTER FUNCTION public.get_family_id(name character varying, order_id integer) OWNER TO postgres;

--
-- Name: get_genus_id(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_genus_id(name character varying, family_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    genus_id integer;

BEGIN

    SELECT id

    INTO genus_id

    FROM genus

    WHERE ($1 = genus.name OR ($1 is NULL AND genus.name is null))

      AND $2 = genus.family_id;

    IF genus_id IS NULL THEN

        INSERT INTO genus(name, family_id) VALUES ($1, $2);

        SELECT get_genus_id($1, $2) INTO genus_id;

    END IF;

    RETURN genus_id;

END;

$_$;


ALTER FUNCTION public.get_genus_id(name character varying, family_id integer) OWNER TO postgres;

--
-- Name: get_id_by_name(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_id_by_name(table_name text, name_ text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    smth_id integer;

BEGIN

    EXECUTE format('SELECT id FROM %1$s WHERE %1$s.name = "%2$s"',  table_name, table_name, name_) INTO smth_id;

    RETURN smth_id;

END

$_$;


ALTER FUNCTION public.get_id_by_name(table_name text, name_ text) OWNER TO postgres;

--
-- Name: get_kind_id(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_kind_id(name character varying, genus_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    kind_id integer;

BEGIN

    SELECT id

    INTO kind_id

    FROM kind

    WHERE ($1 = kind.name OR ($1 is NULL AND kind.name is null))

      AND $2 = kind.genus_id;

    IF kind_id IS NULL THEN

        INSERT INTO kind(name, genus_id) VALUES ($1, $2);

        SELECT get_kind_id($1, $2) INTO kind_id;

    END IF;

    RETURN kind_id;

END;

$_$;


ALTER FUNCTION public.get_kind_id(name character varying, genus_id integer) OWNER TO postgres;

--
-- Name: get_order_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_order_id(order_name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    order_id integer;

BEGIN

    SELECT id INTO order_id FROM "order" WHERE ($1 = "order".name OR ($1 is NULL AND "order".name is null));

    IF order_id IS NULL THEN

        INSERT INTO "order"(name) VALUES ($1);

        SELECT get_order_id($1) INTO order_id;

    END IF;

    RETURN order_id;

END;

$_$;


ALTER FUNCTION public.get_order_id(order_name character varying) OWNER TO postgres;

--
-- Name: get_region_id(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_region_id(name text, country integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    region_id integer;

BEGIN

    SELECT id

    INTO region_id

    FROM region

    WHERE ($1 = region.name OR ($1 is NULL AND region.name is null))

      AND $2 = region.country_id;

    IF region_id IS NULL THEN

        INSERT INTO region(country_id, name) VALUES ($2, $1);

        SELECT get_region_id($1, $2) INTO region_id;

    END IF;

    RETURN region_id;

END;

$_$;


ALTER FUNCTION public.get_region_id(name text, country integer) OWNER TO postgres;

--
-- Name: get_sex_id(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_sex_id(sex_name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    sex_id integer;

BEGIN

    SELECT id INTO sex_id FROM sex WHERE $1 = sex.name;

    IF sex_id IS NULL THEN

        INSERT INTO sex(name) VALUES ($1);

        SELECT id INTO sex_id FROM sex WHERE $1 = sex.name;

    END IF;

    RETURN sex_id;

END;

$_$;


ALTER FUNCTION public.get_sex_id(sex_name character varying) OWNER TO postgres;

--
-- Name: get_subregion_id(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_subregion_id(name text, region_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    subregion_id integer;

BEGIN

    SELECT id

    INTO subregion_id

    FROM subregion

    WHERE ($1 = subregion.name OR ($1 is NULL AND subregion.name is null))

      AND $2 = subregion.region_id;

    IF subregion_id IS NULL THEN

        INSERT INTO subregion(region_id, name) VALUES ($2, $1);

        SELECT get_subregion_id($1, $2) INTO subregion_id;

    END IF;

    RETURN subregion_id;

END;

$_$;


ALTER FUNCTION public.get_subregion_id(name text, region_id integer) OWNER TO postgres;

--
-- Name: get_user_info(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_info() RETURNS public.user_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

    DECLARE login_ text := current_setting('request.jwt.claims', true)::json->>'login';

    DECLARE role text := current_setting('request.jwt.claims', true)::json->>'role';

    DECLARE result user_info;

BEGIN

        SELECT avatar INTO result.avatar_url FROM auth.users WHERE login_ = login;

        result.role := role;

        result.login := login_;

        return result;

END

$$;


ALTER FUNCTION public.get_user_info() OWNER TO postgres;

--
-- Name: get_vouch_inst_id(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_vouch_inst_id(name text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

DECLARE

    vouch_inst_id integer;

BEGIN

    SELECT id INTO vouch_inst_id FROM voucher_institute WHERE $1 = voucher_institute.name;

    IF vouch_inst_id IS NULL THEN

        INSERT INTO voucher_institute(name) VALUES ($1);

        SELECT get_vouch_inst_id($1) INTO vouch_inst_id;

    END IF;

    RETURN vouch_inst_id;

END;

$_$;


ALTER FUNCTION public.get_vouch_inst_id(name text) OWNER TO postgres;

--
-- Name: login(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.login(login text, pass text) RETURNS auth.jwt_token
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$

declare

    _role  name;

    result auth.jwt_token;

begin

    -- check email and password

    select auth.user_role(login, pass) into _role;

    if _role is null then

        raise invalid_password using message = 'invalid user or password';

    end if;

    -- НЕ КОМУ НЕ СООБЩАТЬ КОД, НЕ ХРАНИТЬ ЕГО В ОТКРЫТЫХ ПЕРЕМЕННЫХ

    select sign(

                   row_to_json(r), current_setting('app.jwt_secret')

               ) as token

    from (select _role                                             as role,

                 $1                                                as login,

                 extract(epoch from now())::integer + 60 * 60 * 24 as exp) r

    into result;

    return result;

end;

$_$;


ALTER FUNCTION public.login(login text, pass text) OWNER TO postgres;

--
-- Name: remove_collection(integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_collection(IN col_id integer)
    LANGUAGE plpgsql
    AS $$

BEGIN

    DELETE FROM collection WHERE col_id = id;

END;

$$;


ALTER PROCEDURE public.remove_collection(IN col_id integer) OWNER TO postgres;

--
-- Name: remove_collection_by_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.remove_collection_by_id(col_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

BEGIN

    DELETE FROM collection WHERE col_id = id;

END;

$$;


ALTER FUNCTION public.remove_collection_by_id(col_id integer) OWNER TO postgres;

--
-- Name: test(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.test() RETURNS text
    LANGUAGE plpgsql
    AS $$

BEGIN

    RETURN 'ok';

END

$$;


ALTER FUNCTION public.test() OWNER TO postgres;

--
-- Name: update_collection_by_id(integer, text, character varying, character varying, character varying, character varying, character varying, text, text, text, public.geography, text, text, text, text, date, text, text[], boolean); Type: FUNCTION; Schema: public; Owner: panksu
--

CREATE FUNCTION public.update_collection_by_id(col_id integer, collect_id text DEFAULT NULL::text, "order" character varying DEFAULT NULL::character varying, family character varying DEFAULT NULL::character varying, genus character varying DEFAULT NULL::character varying, kind character varying DEFAULT NULL::character varying, age character varying DEFAULT 'Unknown'::character varying, sex text DEFAULT 'Unknown'::text, vauch_inst text DEFAULT NULL::text, vauch_id text DEFAULT NULL::text, point public.geography DEFAULT NULL::public.geography, country text DEFAULT NULL::text, region text DEFAULT NULL::text, subregion text DEFAULT NULL::text, geocomment text DEFAULT NULL::text, date_collect date DEFAULT NULL::date, comment text DEFAULT NULL::text, collectors text[] DEFAULT '{}'::text[], rna boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
    kind_id_      integer;
    subregion_id_ integer DEFAULT 4;
    collector     text[];
    collector_id_ int;
BEGIN
    kind_id_ := get_kind_id($6, (get_genus_id($5, (get_family_id($4, (get_order_id($3)))))));
    IF ($12 IS NOT NULL) THEN
        subregion_id_ := get_subregion_id($14, (get_region_id($13, (get_country_id($12)))));
    END IF;
    UPDATE collection
    SET kind_id           = kind_id_,
        "CatalogueNumber" = concat('ZIN-TER-M-', col_id),
        subregion_id      = subregion_id_,
        collect_id        = $2,
        age_id            = get_age_id(age),
        sex_id            = get_sex_id(sex),
        vouch_inst_id     = get_vouch_inst_id(vauch_inst),
        vouch_id          = $10,
        point             = $11,
        geo_comment       = geocomment,
        day               = extract(day from date_collect),
        month             = extract(month from date_collect),
        year              = extract(year from date_collect),
        comment           = $17,
        rna               = $19
    WHERE id = col_id;
    DELETE FROM collector_to_collection WHERE collection_id = col_id;
    IF (array_length($18, 1) IS NULL) THEN
        RETURN;
    END IF;
    FOREACH collector SLICE 1 IN ARRAY $18
        LOOP
            collector_id_ := get_collector_id(collector[1]);
            INSERT INTO collector_to_collection(collector_id, collection_id) VALUES (collector_id_, col_id);
        END LOOP;
END
$_$;


ALTER FUNCTION public.update_collection_by_id(col_id integer, collect_id text, "order" character varying, family character varying, genus character varying, kind character varying, age character varying, sex text, vauch_inst text, vauch_id text, point public.geography, country text, region text, subregion text, geocomment text, date_collect date, comment text, collectors text[], rna boolean) OWNER TO panksu;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: users; Type: TABLE; Schema: auth; Owner: postgres
--

CREATE TABLE auth.users (
    login text NOT NULL,
    pass text NOT NULL,
    role name NOT NULL,
    avatar text,
    CONSTRAINT users_pass_check CHECK ((length(pass) < 512)),
    CONSTRAINT users_role_check CHECK ((length((role)::text) < 512))
);


ALTER TABLE auth.users OWNER TO postgres;

--
-- Name: COLUMN users.avatar; Type: COMMENT; Schema: auth; Owner: postgres
--

COMMENT ON COLUMN auth.users.avatar IS 'Ссылка на аватарку';


--
-- Name: age; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.age (
    id integer NOT NULL,
    name character varying(20)
);


ALTER TABLE public.age OWNER TO postgres;

--
-- Name: TABLE age; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.age IS 'Возраста животных';


--
-- Name: COLUMN age.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.age.id IS 'ID возраста';


--
-- Name: COLUMN age.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.age.name IS 'Назване возраста';


--
-- Name: age_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.age_id_seq
    START WITH 0
    INCREMENT BY 1
    MINVALUE 0
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.age_id_seq OWNER TO postgres;

--
-- Name: age_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.age_id_seq OWNED BY public.age.id;


--
-- Name: basic_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.basic_view AS
SELECT
    NULL::integer AS id,
    NULL::text AS "CatalogueNumber",
    NULL::text AS collect_id,
    NULL::character varying(80) AS "Отряд",
    NULL::character varying(80) AS "Семейство",
    NULL::character varying(80) AS "Род",
    NULL::character varying(80) AS "Вид",
    NULL::character varying(20) AS "Возраст",
    NULL::character varying(40) AS "Пол",
    NULL::text AS "Вауч. институт",
    NULL::character varying(20) AS "Ваучерный ID",
    NULL::double precision AS latitude,
    NULL::double precision AS longtitude,
    NULL::text AS "Страна",
    NULL::text AS "Регион",
    NULL::text AS "Субрегион",
    NULL::text AS "Геокомментарий",
    NULL::text AS "Дата",
    NULL::boolean AS rna,
    NULL::text AS "Комментарий",
    NULL::text AS "Коллекторы",
    NULL::boolean AS "Файл";


ALTER TABLE public.basic_view OWNER TO postgres;

--
-- Name: collection; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.collection (
    id integer NOT NULL,
    "CatalogueNumber" text,
    collect_id text,
    kind_id integer NOT NULL,
    subregion_id integer NOT NULL,
    gen_bank_id character varying(20),
    point public.geography(Point,4326),
    vouch_inst_id integer,
    vouch_id character varying(20),
    rna boolean DEFAULT false NOT NULL,
    sex_id integer,
    age_id integer,
    day integer,
    month integer,
    year integer NOT NULL,
    comment text,
    geo_comment text,
    file_url text,
    CONSTRAINT genbank_check CHECK ((((gen_bank_id)::text ~ 'OP\d+'::text) OR (gen_bank_id IS NULL)))
);


ALTER TABLE public.collection OWNER TO postgres;

--
-- Name: TABLE collection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.collection IS 'Коллекция лаборатории Эволюционной геномики и палеогеномики';


--
-- Name: COLUMN collection.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.id IS 'ID Taxon';


--
-- Name: COLUMN collection."CatalogueNumber"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection."CatalogueNumber" IS 'Номер в каталоге';


--
-- Name: COLUMN collection.collect_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.collect_id IS 'Номер сбора';


--
-- Name: COLUMN collection.kind_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.kind_id IS 'ID вида';


--
-- Name: COLUMN collection.subregion_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.subregion_id IS 'ID Субрегиона';


--
-- Name: COLUMN collection.gen_bank_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.gen_bank_id IS 'GENBANK';


--
-- Name: COLUMN collection.point; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.point IS 'Точка в координатах';


--
-- Name: COLUMN collection.vouch_inst_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.vouch_inst_id IS 'Вауч. Инст.';


--
-- Name: COLUMN collection.vouch_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.vouch_id IS 'Вауч. Код';


--
-- Name: COLUMN collection.sex_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.sex_id IS 'Пол';


--
-- Name: COLUMN collection.age_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.age_id IS 'ID возраста';


--
-- Name: COLUMN collection.file_url; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collection.file_url IS 'Ссылка на файл';


--
-- Name: CONSTRAINT genbank_check ON collection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON CONSTRAINT genbank_check ON public.collection IS 'Проверка на правильность GENBANK';


--
-- Name: collection_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.collection_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.collection_id_seq OWNER TO postgres;

--
-- Name: collection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.collection_id_seq OWNED BY public.collection.id;


--
-- Name: collector; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.collector (
    id integer NOT NULL,
    last_name character varying(100) NOT NULL,
    first_name character varying(100),
    second_name character varying(100)
);


ALTER TABLE public.collector OWNER TO postgres;

--
-- Name: TABLE collector; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.collector IS 'Коллектор ';


--
-- Name: COLUMN collector.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collector.id IS 'ID коллектора';


--
-- Name: COLUMN collector.last_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collector.last_name IS 'Фамилия';


--
-- Name: COLUMN collector.first_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collector.first_name IS 'Имя';


--
-- Name: COLUMN collector.second_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.collector.second_name IS 'Отчество';


--
-- Name: collector_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.collector_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.collector_id_seq OWNER TO postgres;

--
-- Name: collector_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.collector_id_seq OWNED BY public.collector.id;


--
-- Name: collector_to_collection; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.collector_to_collection (
    collector_id integer NOT NULL,
    collection_id integer NOT NULL
);


ALTER TABLE public.collector_to_collection OWNER TO postgres;

--
-- Name: TABLE collector_to_collection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.collector_to_collection IS 'Смежная таблица для того чтобы было несколько коллекторов к элементу коллекции';


--
-- Name: country; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.country (
    id integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.country OWNER TO postgres;

--
-- Name: TABLE country; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.country IS 'Страна';


--
-- Name: country_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.country_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.country_id_seq OWNER TO postgres;

--
-- Name: country_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.country_id_seq OWNED BY public.country.id;


--
-- Name: family; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.family (
    id integer NOT NULL,
    order_id integer NOT NULL,
    name character varying(80)
);


ALTER TABLE public.family OWNER TO postgres;

--
-- Name: TABLE family; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.family IS 'Семейство';


--
-- Name: COLUMN family.order_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.family.order_id IS 'Идентификатор отряда';


--
-- Name: COLUMN family.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.family.name IS 'Название семейства';


--
-- Name: family_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.family_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.family_id_seq OWNER TO postgres;

--
-- Name: family_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.family_id_seq OWNED BY public.family.id;


--
-- Name: genus; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.genus (
    id integer NOT NULL,
    family_id integer NOT NULL,
    name character varying(80)
);


ALTER TABLE public.genus OWNER TO postgres;

--
-- Name: TABLE genus; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.genus IS 'Род';


--
-- Name: COLUMN genus.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.genus.id IS 'Идентификатор рода';


--
-- Name: COLUMN genus.family_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.genus.family_id IS 'Идентиификатор семейства';


--
-- Name: COLUMN genus.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.genus.name IS 'Название рода';


--
-- Name: genus_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.genus_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.genus_id_seq OWNER TO postgres;

--
-- Name: genus_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.genus_id_seq OWNED BY public.genus.id;


--
-- Name: kind; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.kind (
    id integer NOT NULL,
    genus_id integer NOT NULL,
    name character varying(80)
);


ALTER TABLE public.kind OWNER TO postgres;

--
-- Name: TABLE kind; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.kind IS 'вид';


--
-- Name: COLUMN kind.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.kind.id IS 'Идентификатор вида';


--
-- Name: COLUMN kind.genus_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.kind.genus_id IS 'Идентификатор рода';


--
-- Name: COLUMN kind.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.kind.name IS 'Название вида';


--
-- Name: kind_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.kind_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.kind_id_seq OWNER TO postgres;

--
-- Name: kind_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.kind_id_seq OWNED BY public.kind.id;


--
-- Name: order; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."order" (
    id integer NOT NULL,
    name character varying(80)
);


ALTER TABLE public."order" OWNER TO postgres;

--
-- Name: TABLE "order"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public."order" IS 'Отряд';


--
-- Name: COLUMN "order".id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."order".id IS 'Идентификатор отряда';


--
-- Name: order_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.order_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.order_id_seq OWNER TO postgres;

--
-- Name: order_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.order_id_seq OWNED BY public."order".id;


--
-- Name: region; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.region (
    id integer NOT NULL,
    country_id integer NOT NULL,
    name text
);


ALTER TABLE public.region OWNER TO postgres;

--
-- Name: TABLE region; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.region IS 'Регион';


--
-- Name: COLUMN region.country_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.region.country_id IS 'Идентификатор к стране, к которой этот регион относится';


--
-- Name: region_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.region_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.region_id_seq OWNER TO postgres;

--
-- Name: region_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.region_id_seq OWNED BY public.region.id;


--
-- Name: sex; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sex (
    id integer NOT NULL,
    name character varying(40) NOT NULL
);


ALTER TABLE public.sex OWNER TO postgres;

--
-- Name: TABLE sex; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.sex IS 'Пол';


--
-- Name: COLUMN sex.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sex.id IS 'ID пола';


--
-- Name: COLUMN sex.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sex.name IS 'Название пола';


--
-- Name: sex_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.sex_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sex_id_seq OWNER TO postgres;

--
-- Name: sex_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.sex_id_seq OWNED BY public.sex.id;


--
-- Name: subregion; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subregion (
    id integer NOT NULL,
    region_id integer NOT NULL,
    name text
);


ALTER TABLE public.subregion OWNER TO postgres;

--
-- Name: TABLE subregion; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.subregion IS 'Субрегион';


--
-- Name: COLUMN subregion.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.subregion.id IS 'ID региона';


--
-- Name: COLUMN subregion.region_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.subregion.region_id IS 'ID к региону, к которому принадлежит';


--
-- Name: subregion_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.subregion_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.subregion_id_seq OWNER TO postgres;

--
-- Name: subregion_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.subregion_id_seq OWNED BY public.subregion.id;


--
-- Name: voucher_institute; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.voucher_institute (
    id integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.voucher_institute OWNER TO postgres;

--
-- Name: TABLE voucher_institute; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.voucher_institute IS 'Ваучерный интститут';


--
-- Name: voucher_institute_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.voucher_institute_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.voucher_institute_id_seq OWNER TO postgres;

--
-- Name: voucher_institute_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.voucher_institute_id_seq OWNED BY public.voucher_institute.id;


--
-- Name: age id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.age ALTER COLUMN id SET DEFAULT nextval('public.age_id_seq'::regclass);


--
-- Name: collection id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection ALTER COLUMN id SET DEFAULT nextval('public.collection_id_seq'::regclass);


--
-- Name: collector id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collector ALTER COLUMN id SET DEFAULT nextval('public.collector_id_seq'::regclass);


--
-- Name: country id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.country ALTER COLUMN id SET DEFAULT nextval('public.country_id_seq'::regclass);


--
-- Name: family id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.family ALTER COLUMN id SET DEFAULT nextval('public.family_id_seq'::regclass);


--
-- Name: genus id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genus ALTER COLUMN id SET DEFAULT nextval('public.genus_id_seq'::regclass);


--
-- Name: kind id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kind ALTER COLUMN id SET DEFAULT nextval('public.kind_id_seq'::regclass);


--
-- Name: order id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."order" ALTER COLUMN id SET DEFAULT nextval('public.order_id_seq'::regclass);


--
-- Name: region id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.region ALTER COLUMN id SET DEFAULT nextval('public.region_id_seq'::regclass);


--
-- Name: sex id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sex ALTER COLUMN id SET DEFAULT nextval('public.sex_id_seq'::regclass);


--
-- Name: subregion id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subregion ALTER COLUMN id SET DEFAULT nextval('public.subregion_id_seq'::regclass);


--
-- Name: voucher_institute id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.voucher_institute ALTER COLUMN id SET DEFAULT nextval('public.voucher_institute_id_seq'::regclass);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: postgres
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (login);


--
-- Name: age age_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.age
    ADD CONSTRAINT age_pk PRIMARY KEY (id);


--
-- Name: collection collection_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection
    ADD CONSTRAINT collection_pk PRIMARY KEY (id);


--
-- Name: collector collector_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collector
    ADD CONSTRAINT collector_pk PRIMARY KEY (id);


--
-- Name: collector_to_collection collector_to_collection_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collector_to_collection
    ADD CONSTRAINT collector_to_collection_pk PRIMARY KEY (collector_id, collection_id);


--
-- Name: country country_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.country
    ADD CONSTRAINT country_pk PRIMARY KEY (id);


--
-- Name: family family_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.family
    ADD CONSTRAINT family_pk PRIMARY KEY (id);


--
-- Name: genus genus_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genus
    ADD CONSTRAINT genus_pk PRIMARY KEY (id);


--
-- Name: kind kind_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kind
    ADD CONSTRAINT kind_pk PRIMARY KEY (id);


--
-- Name: order order_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."order"
    ADD CONSTRAINT order_pk PRIMARY KEY (id);


--
-- Name: region region_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.region
    ADD CONSTRAINT region_pk PRIMARY KEY (id);


--
-- Name: sex sex_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sex
    ADD CONSTRAINT sex_pk PRIMARY KEY (id);


--
-- Name: subregion subregion_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subregion
    ADD CONSTRAINT subregion_pk PRIMARY KEY (id);


--
-- Name: voucher_institute voucher_institute_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.voucher_institute
    ADD CONSTRAINT voucher_institute_pk PRIMARY KEY (id);


--
-- Name: basic_view _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.basic_view AS
 SELECT collection.id,
    collection."CatalogueNumber",
    collection.collect_id,
    order_.name AS "Отряд",
    family.name AS "Семейство",
    genus.name AS "Род",
    kind.name AS "Вид",
    age.name AS "Возраст",
    sex.name AS "Пол",
    vi.name AS "Вауч. институт",
    collection.vouch_id AS "Ваучерный ID",
    public.st_y((collection.point)::public.geometry) AS latitude,
    public.st_x((collection.point)::public.geometry) AS longtitude,
    country.name AS "Страна",
    region.name AS "Регион",
    subregion.name AS "Субрегион",
    collection.geo_comment AS "Геокомментарий",
        CASE
            WHEN (collection.year = 0) THEN NULL::text
            WHEN ((collection.day IS NULL) AND (collection.month IS NULL)) THEN (collection.year)::text
            WHEN (collection.day IS NULL) THEN concat_ws('.'::text, collection.month, collection.year)
            ELSE concat_ws('.'::text, collection.day, collection.month, collection.year)
        END AS "Дата",
    collection.rna,
    collection.comment AS "Комментарий",
    string_agg(concat(c.last_name,
        CASE
            WHEN (c.first_name IS NOT NULL) THEN concat(' ', "left"((c.first_name)::text, 1), '.')
            ELSE ''::text
        END,
        CASE
            WHEN (c.second_name IS NOT NULL) THEN concat(' ', "left"((c.second_name)::text, 1), '.')
            ELSE ''::text
        END), ', '::text) AS "Коллекторы",
    (collection.file_url IS NOT NULL) AS "Файл"
   FROM ((((((((((((public.collection
     JOIN public.kind ON ((kind.id = collection.kind_id)))
     JOIN public.genus ON ((genus.id = kind.genus_id)))
     JOIN public.family ON ((family.id = genus.family_id)))
     JOIN public."order" order_ ON ((order_.id = family.order_id)))
     JOIN public.age ON ((age.id = collection.age_id)))
     JOIN public.sex ON ((collection.sex_id = sex.id)))
     JOIN public.voucher_institute vi ON ((vi.id = collection.vouch_inst_id)))
     JOIN public.subregion ON ((collection.subregion_id = subregion.id)))
     JOIN public.region ON ((subregion.region_id = region.id)))
     JOIN public.country ON ((region.country_id = country.id)))
     LEFT JOIN public.collector_to_collection ctc ON ((collection.id = ctc.collection_id)))
     LEFT JOIN public.collector c ON ((ctc.collector_id = c.id)))
  GROUP BY collection.id, order_.name, family.name, genus.name, kind.name, age.name, sex.name, vi.name, country.name, region.name, subregion.name
  ORDER BY collection.id;


--
-- Name: users encrypt_pass; Type: TRIGGER; Schema: auth; Owner: postgres
--

CREATE TRIGGER encrypt_pass BEFORE INSERT OR UPDATE ON auth.users FOR EACH ROW EXECUTE FUNCTION auth.encrypt_pass();


--
-- Name: collection collection_age_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection
    ADD CONSTRAINT collection_age_id_fk FOREIGN KEY (age_id) REFERENCES public.age(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: collection collection_kind_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection
    ADD CONSTRAINT collection_kind_null_fk FOREIGN KEY (kind_id) REFERENCES public.kind(id);


--
-- Name: collection collection_sex_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection
    ADD CONSTRAINT collection_sex_id_fk FOREIGN KEY (sex_id) REFERENCES public.sex(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: collection collection_subregion_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection
    ADD CONSTRAINT collection_subregion_null_fk FOREIGN KEY (subregion_id) REFERENCES public.subregion(id);


--
-- Name: collection collection_voucher_institute_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collection
    ADD CONSTRAINT collection_voucher_institute_null_fk FOREIGN KEY (vouch_inst_id) REFERENCES public.voucher_institute(id);


--
-- Name: collector_to_collection collector_to_collection_collection_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collector_to_collection
    ADD CONSTRAINT collector_to_collection_collection_null_fk FOREIGN KEY (collection_id) REFERENCES public.collection(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: collector_to_collection collector_to_collection_collector_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.collector_to_collection
    ADD CONSTRAINT collector_to_collection_collector_null_fk FOREIGN KEY (collector_id) REFERENCES public.collector(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: family family_order_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.family
    ADD CONSTRAINT family_order_null_fk FOREIGN KEY (order_id) REFERENCES public."order"(id);


--
-- Name: genus genus_family_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genus
    ADD CONSTRAINT genus_family_null_fk FOREIGN KEY (family_id) REFERENCES public.family(id);


--
-- Name: region region_country_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.region
    ADD CONSTRAINT region_country_null_fk FOREIGN KEY (country_id) REFERENCES public.country(id);


--
-- Name: subregion subregion_region_null_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subregion
    ADD CONSTRAINT subregion_region_null_fk FOREIGN KEY (region_id) REFERENCES public.region(id);


--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA auth TO head_lab;
GRANT ALL ON SCHEMA auth TO database_admin;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO web_anon;
GRANT USAGE ON SCHEMA public TO lab_worker;
GRANT ALL ON SCHEMA public TO database_admin;


--
-- Name: FUNCTION box2d_in(cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box2d_in(cstring) TO head_lab;


--
-- Name: FUNCTION box2d_out(public.box2d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box2d_out(public.box2d) TO head_lab;


--
-- Name: FUNCTION box2df_in(cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box2df_in(cstring) TO head_lab;


--
-- Name: FUNCTION box2df_out(public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box2df_out(public.box2df) TO head_lab;


--
-- Name: FUNCTION box3d_in(cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box3d_in(cstring) TO head_lab;


--
-- Name: FUNCTION box3d_out(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box3d_out(public.box3d) TO head_lab;


--
-- Name: FUNCTION geography_analyze(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_analyze(internal) TO head_lab;


--
-- Name: FUNCTION geography_in(cstring, oid, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_in(cstring, oid, integer) TO head_lab;


--
-- Name: FUNCTION geography_out(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_out(public.geography) TO head_lab;


--
-- Name: FUNCTION geography_recv(internal, oid, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_recv(internal, oid, integer) TO head_lab;


--
-- Name: FUNCTION geography_send(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_send(public.geography) TO head_lab;


--
-- Name: FUNCTION geography_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_typmod_in(cstring[]) TO head_lab;


--
-- Name: FUNCTION geography_typmod_out(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_typmod_out(integer) TO head_lab;


--
-- Name: FUNCTION geometry_analyze(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_analyze(internal) TO head_lab;


--
-- Name: FUNCTION geometry_in(cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_in(cstring) TO head_lab;


--
-- Name: FUNCTION geometry_out(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_out(public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_recv(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_recv(internal) TO head_lab;


--
-- Name: FUNCTION geometry_send(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_send(public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_typmod_in(cstring[]) TO head_lab;


--
-- Name: FUNCTION geometry_typmod_out(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_typmod_out(integer) TO head_lab;


--
-- Name: FUNCTION gidx_in(cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gidx_in(cstring) TO head_lab;


--
-- Name: FUNCTION gidx_out(public.gidx); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gidx_out(public.gidx) TO head_lab;


--
-- Name: FUNCTION spheroid_in(cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.spheroid_in(cstring) TO head_lab;


--
-- Name: FUNCTION spheroid_out(public.spheroid); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.spheroid_out(public.spheroid) TO head_lab;


--
-- Name: FUNCTION box3d(public.box2d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box3d(public.box2d) TO head_lab;


--
-- Name: FUNCTION geometry(public.box2d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(public.box2d) TO head_lab;


--
-- Name: FUNCTION box(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box(public.box3d) TO head_lab;


--
-- Name: FUNCTION box2d(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box2d(public.box3d) TO head_lab;


--
-- Name: FUNCTION geometry(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(public.box3d) TO head_lab;


--
-- Name: FUNCTION geography(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography(bytea) TO head_lab;


--
-- Name: FUNCTION geometry(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(bytea) TO head_lab;


--
-- Name: FUNCTION bytea(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.bytea(public.geography) TO head_lab;


--
-- Name: FUNCTION geography(public.geography, integer, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography(public.geography, integer, boolean) TO head_lab;


--
-- Name: FUNCTION geometry(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(public.geography) TO head_lab;


--
-- Name: FUNCTION box(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box(public.geometry) TO head_lab;


--
-- Name: FUNCTION box2d(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box2d(public.geometry) TO head_lab;


--
-- Name: FUNCTION box3d(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box3d(public.geometry) TO head_lab;


--
-- Name: FUNCTION bytea(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.bytea(public.geometry) TO head_lab;


--
-- Name: FUNCTION geography(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography(public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry(public.geometry, integer, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(public.geometry, integer, boolean) TO head_lab;


--
-- Name: FUNCTION json(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.json(public.geometry) TO head_lab;


--
-- Name: FUNCTION jsonb(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.jsonb(public.geometry) TO head_lab;


--
-- Name: FUNCTION path(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.path(public.geometry) TO head_lab;


--
-- Name: FUNCTION point(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.point(public.geometry) TO head_lab;


--
-- Name: FUNCTION polygon(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.polygon(public.geometry) TO head_lab;


--
-- Name: FUNCTION text(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.text(public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry(path); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(path) TO head_lab;


--
-- Name: FUNCTION geometry(point); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(point) TO head_lab;


--
-- Name: FUNCTION geometry(polygon); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(polygon) TO head_lab;


--
-- Name: FUNCTION geometry(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry(text) TO head_lab;


--
-- Name: FUNCTION _postgis_deprecate(oldname text, newname text, version text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_deprecate(oldname text, newname text, version text) TO head_lab;


--
-- Name: FUNCTION _postgis_index_extent(tbl regclass, col text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_index_extent(tbl regclass, col text) TO head_lab;


--
-- Name: FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_join_selectivity(regclass, text, regclass, text, text) TO head_lab;


--
-- Name: FUNCTION _postgis_pgsql_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_pgsql_version() TO head_lab;


--
-- Name: FUNCTION _postgis_scripts_pgsql_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_scripts_pgsql_version() TO head_lab;


--
-- Name: FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom public.geometry, mode text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_selectivity(tbl regclass, att_name text, geom public.geometry, mode text) TO head_lab;


--
-- Name: FUNCTION _postgis_stats(tbl regclass, att_name text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._postgis_stats(tbl regclass, att_name text, text) TO head_lab;


--
-- Name: FUNCTION _st_3ddfullywithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_3ddfullywithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION _st_3ddwithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_3ddwithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION _st_3dintersects(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_3dintersects(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_asgml(integer, public.geometry, integer, integer, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_asgml(integer, public.geometry, integer, integer, text, text) TO head_lab;


--
-- Name: FUNCTION _st_asx3d(integer, public.geometry, integer, integer, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_asx3d(integer, public.geometry, integer, integer, text) TO head_lab;


--
-- Name: FUNCTION _st_bestsrid(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_bestsrid(public.geography) TO head_lab;


--
-- Name: FUNCTION _st_bestsrid(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_bestsrid(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION _st_contains(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_contains(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_containsproperly(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_containsproperly(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_coveredby(geog1 public.geography, geog2 public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_coveredby(geog1 public.geography, geog2 public.geography) TO head_lab;


--
-- Name: FUNCTION _st_coveredby(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_coveredby(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_covers(geog1 public.geography, geog2 public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_covers(geog1 public.geography, geog2 public.geography) TO head_lab;


--
-- Name: FUNCTION _st_covers(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_covers(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_crosses(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_crosses(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_dfullywithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_dfullywithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION _st_distancetree(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_distancetree(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION _st_distancetree(public.geography, public.geography, double precision, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_distancetree(public.geography, public.geography, double precision, boolean) TO head_lab;


--
-- Name: FUNCTION _st_distanceuncached(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_distanceuncached(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION _st_distanceuncached(public.geography, public.geography, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_distanceuncached(public.geography, public.geography, boolean) TO head_lab;


--
-- Name: FUNCTION _st_distanceuncached(public.geography, public.geography, double precision, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_distanceuncached(public.geography, public.geography, double precision, boolean) TO head_lab;


--
-- Name: FUNCTION _st_dwithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_dwithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION _st_dwithin(geog1 public.geography, geog2 public.geography, tolerance double precision, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_dwithin(geog1 public.geography, geog2 public.geography, tolerance double precision, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION _st_dwithinuncached(public.geography, public.geography, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_dwithinuncached(public.geography, public.geography, double precision) TO head_lab;


--
-- Name: FUNCTION _st_dwithinuncached(public.geography, public.geography, double precision, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_dwithinuncached(public.geography, public.geography, double precision, boolean) TO head_lab;


--
-- Name: FUNCTION _st_equals(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_equals(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_expand(public.geography, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_expand(public.geography, double precision) TO head_lab;


--
-- Name: FUNCTION _st_geomfromgml(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_geomfromgml(text, integer) TO head_lab;


--
-- Name: FUNCTION _st_intersects(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_intersects(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_linecrossingdirection(line1 public.geometry, line2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_linecrossingdirection(line1 public.geometry, line2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_longestline(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_longestline(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_maxdistance(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_maxdistance(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_orderingequals(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_orderingequals(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_overlaps(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_overlaps(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_pointoutside(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_pointoutside(public.geography) TO head_lab;


--
-- Name: FUNCTION _st_sortablehash(geom public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_sortablehash(geom public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_touches(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_touches(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION _st_voronoi(g1 public.geometry, clip public.geometry, tolerance double precision, return_polygons boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_voronoi(g1 public.geometry, clip public.geometry, tolerance double precision, return_polygons boolean) TO head_lab;


--
-- Name: FUNCTION _st_within(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public._st_within(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION add_collection(collect_id text, "order" character varying, family character varying, genus character varying, kind character varying, age character varying, sex text, vauch_inst text, vauch_id text, point public.geography, country text, region text, subregion text, geocomment text, date_collect date, comment text, collectors text[], rna boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.add_collection(collect_id text, "order" character varying, family character varying, genus character varying, kind character varying, age character varying, sex text, vauch_inst text, vauch_id text, point public.geography, country text, region text, subregion text, geocomment text, date_collect date, comment text, collectors text[], rna boolean) TO head_lab;


--
-- Name: FUNCTION add_topology("order" character varying, family character varying, genus character varying, kind character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.add_topology("order" character varying, family character varying, genus character varying, kind character varying) TO lab_worker;
GRANT ALL ON FUNCTION public.add_topology("order" character varying, family character varying, genus character varying, kind character varying) TO head_lab;


--
-- Name: FUNCTION addauth(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.addauth(text) TO head_lab;


--
-- Name: FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO head_lab;


--
-- Name: FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO head_lab;


--
-- Name: FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO head_lab;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.algorithm_sign(signables text, secret text, algorithm text) TO head_lab;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.armor(bytea) TO head_lab;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.armor(bytea, text[], text[]) TO head_lab;


--
-- Name: FUNCTION box3dtobox(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.box3dtobox(public.box3d) TO head_lab;


--
-- Name: FUNCTION checkauth(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.checkauth(text, text) TO head_lab;


--
-- Name: FUNCTION checkauth(text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.checkauth(text, text, text) TO head_lab;


--
-- Name: FUNCTION checkauthtrigger(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.checkauthtrigger() TO head_lab;


--
-- Name: FUNCTION collectors_test(collectors text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.collectors_test(collectors text[]) TO head_lab;


--
-- Name: FUNCTION contains_2d(public.box2df, public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.contains_2d(public.box2df, public.box2df) TO head_lab;


--
-- Name: FUNCTION contains_2d(public.box2df, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.contains_2d(public.box2df, public.geometry) TO head_lab;


--
-- Name: FUNCTION contains_2d(public.geometry, public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.contains_2d(public.geometry, public.box2df) TO head_lab;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.crypt(text, text) TO head_lab;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dearmor(text) TO head_lab;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.decrypt(bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.decrypt_iv(bytea, bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.digest(bytea, text) TO head_lab;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.digest(text, text) TO head_lab;


--
-- Name: FUNCTION disablelongtransactions(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.disablelongtransactions() TO head_lab;


--
-- Name: FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dropgeometrycolumn(table_name character varying, column_name character varying) TO head_lab;


--
-- Name: FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO head_lab;


--
-- Name: FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO head_lab;


--
-- Name: FUNCTION dropgeometrytable(table_name character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dropgeometrytable(table_name character varying) TO head_lab;


--
-- Name: FUNCTION dropgeometrytable(schema_name character varying, table_name character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dropgeometrytable(schema_name character varying, table_name character varying) TO head_lab;


--
-- Name: FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO head_lab;


--
-- Name: FUNCTION enablelongtransactions(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.enablelongtransactions() TO head_lab;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.encrypt(bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.encrypt_iv(bytea, bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION equals(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.equals(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION find_srid(character varying, character varying, character varying); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.find_srid(character varying, character varying, character varying) TO head_lab;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gen_random_bytes(integer) TO head_lab;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gen_random_uuid() TO head_lab;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gen_salt(text) TO head_lab;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gen_salt(text, integer) TO head_lab;


--
-- Name: FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geog_brin_inclusion_add_value(internal, internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_cmp(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_cmp(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_distance_knn(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_distance_knn(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_eq(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_eq(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_ge(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_ge(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_gist_compress(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_compress(internal) TO head_lab;


--
-- Name: FUNCTION geography_gist_consistent(internal, public.geography, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_consistent(internal, public.geography, integer) TO head_lab;


--
-- Name: FUNCTION geography_gist_decompress(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_decompress(internal) TO head_lab;


--
-- Name: FUNCTION geography_gist_distance(internal, public.geography, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_distance(internal, public.geography, integer) TO head_lab;


--
-- Name: FUNCTION geography_gist_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_penalty(internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_gist_picksplit(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_picksplit(internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_gist_same(public.box2d, public.box2d, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_same(public.box2d, public.box2d, internal) TO head_lab;


--
-- Name: FUNCTION geography_gist_union(bytea, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gist_union(bytea, internal) TO head_lab;


--
-- Name: FUNCTION geography_gt(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_gt(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_le(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_le(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_lt(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_lt(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_overlaps(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_overlaps(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION geography_spgist_choose_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_spgist_choose_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_spgist_compress_nd(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_spgist_compress_nd(internal) TO head_lab;


--
-- Name: FUNCTION geography_spgist_config_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_spgist_config_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_spgist_inner_consistent_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_spgist_inner_consistent_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_spgist_leaf_consistent_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_spgist_leaf_consistent_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geography_spgist_picksplit_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geography_spgist_picksplit_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_above(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_above(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_below(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_below(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_cmp(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_cmp(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_contained_3d(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_contained_3d(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_contains(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_contains(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_contains_3d(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_contains_3d(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_contains_nd(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_contains_nd(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_distance_box(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_distance_box(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_distance_centroid(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_distance_centroid(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_distance_centroid_nd(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_distance_centroid_nd(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_distance_cpa(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_distance_cpa(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_eq(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_eq(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_ge(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_ge(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_gist_compress_2d(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_compress_2d(internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_compress_nd(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_compress_nd(internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_consistent_2d(internal, public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_consistent_2d(internal, public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION geometry_gist_consistent_nd(internal, public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_consistent_nd(internal, public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION geometry_gist_decompress_2d(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_decompress_2d(internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_decompress_nd(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_decompress_nd(internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_distance_2d(internal, public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_distance_2d(internal, public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION geometry_gist_distance_nd(internal, public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_distance_nd(internal, public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION geometry_gist_penalty_2d(internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_penalty_2d(internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_penalty_nd(internal, internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_penalty_nd(internal, internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_picksplit_2d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_picksplit_2d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_picksplit_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_picksplit_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_same_2d(geom1 public.geometry, geom2 public.geometry, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_same_2d(geom1 public.geometry, geom2 public.geometry, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_same_nd(public.geometry, public.geometry, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_same_nd(public.geometry, public.geometry, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_sortsupport_2d(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_sortsupport_2d(internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_union_2d(bytea, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_union_2d(bytea, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gist_union_nd(bytea, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gist_union_nd(bytea, internal) TO head_lab;


--
-- Name: FUNCTION geometry_gt(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_gt(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_hash(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_hash(public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_le(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_le(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_left(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_left(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_lt(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_lt(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overabove(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overabove(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overbelow(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overbelow(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overlaps(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overlaps(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overlaps_3d(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overlaps_3d(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overlaps_nd(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overlaps_nd(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overleft(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overleft(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_overright(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_overright(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_right(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_right(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_same(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_same(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_same_3d(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_same_3d(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_same_nd(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_same_nd(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_sortsupport(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_sortsupport(internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_choose_2d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_choose_2d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_choose_3d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_choose_3d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_choose_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_choose_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_compress_2d(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_compress_2d(internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_compress_3d(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_compress_3d(internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_compress_nd(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_compress_nd(internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_config_2d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_config_2d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_config_3d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_config_3d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_config_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_config_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_inner_consistent_2d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_inner_consistent_2d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_inner_consistent_3d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_inner_consistent_3d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_inner_consistent_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_inner_consistent_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_leaf_consistent_2d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_leaf_consistent_2d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_leaf_consistent_3d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_leaf_consistent_3d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_leaf_consistent_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_leaf_consistent_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_picksplit_2d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_picksplit_2d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_picksplit_3d(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_picksplit_3d(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_spgist_picksplit_nd(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_spgist_picksplit_nd(internal, internal) TO head_lab;


--
-- Name: FUNCTION geometry_within(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_within(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION geometry_within_nd(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometry_within_nd(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION geometrytype(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometrytype(public.geography) TO head_lab;


--
-- Name: FUNCTION geometrytype(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geometrytype(public.geometry) TO head_lab;


--
-- Name: FUNCTION geomfromewkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geomfromewkb(bytea) TO head_lab;


--
-- Name: FUNCTION geomfromewkt(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.geomfromewkt(text) TO head_lab;


--
-- Name: FUNCTION get_age_id(age_name character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_age_id(age_name character varying) TO head_lab;


--
-- Name: FUNCTION get_collector_id(last_name character varying, first_name character varying, second_name character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_collector_id(last_name character varying, first_name character varying, second_name character varying) TO head_lab;


--
-- Name: FUNCTION get_country_id(name text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_country_id(name text) TO head_lab;


--
-- Name: FUNCTION get_family_id(name character varying, order_id integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_family_id(name character varying, order_id integer) TO head_lab;


--
-- Name: FUNCTION get_genus_id(name character varying, family_id integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_genus_id(name character varying, family_id integer) TO head_lab;


--
-- Name: FUNCTION get_id_by_name(table_name text, name_ text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_id_by_name(table_name text, name_ text) TO head_lab;


--
-- Name: FUNCTION get_kind_id(name character varying, genus_id integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_kind_id(name character varying, genus_id integer) TO head_lab;


--
-- Name: FUNCTION get_order_id(order_name character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_order_id(order_name character varying) TO head_lab;


--
-- Name: FUNCTION get_proj4_from_srid(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.get_proj4_from_srid(integer) TO head_lab;


--
-- Name: FUNCTION get_region_id(name text, country integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_region_id(name text, country integer) TO head_lab;


--
-- Name: FUNCTION get_sex_id(sex_name character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_sex_id(sex_name character varying) TO head_lab;


--
-- Name: FUNCTION get_subregion_id(name text, region_id integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_subregion_id(name text, region_id integer) TO head_lab;


--
-- Name: FUNCTION get_vouch_inst_id(name text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_vouch_inst_id(name text) TO head_lab;


--
-- Name: FUNCTION gettransactionid(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gettransactionid() TO head_lab;


--
-- Name: FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO head_lab;


--
-- Name: FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO head_lab;


--
-- Name: FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gserialized_gist_sel_2d(internal, oid, internal, integer) TO head_lab;


--
-- Name: FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.gserialized_gist_sel_nd(internal, oid, internal, integer) TO head_lab;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.hmac(bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.hmac(text, text, text) TO head_lab;


--
-- Name: FUNCTION is_contained_2d(public.box2df, public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.is_contained_2d(public.box2df, public.box2df) TO head_lab;


--
-- Name: FUNCTION is_contained_2d(public.box2df, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.is_contained_2d(public.box2df, public.geometry) TO head_lab;


--
-- Name: FUNCTION is_contained_2d(public.geometry, public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.is_contained_2d(public.geometry, public.box2df) TO head_lab;


--
-- Name: FUNCTION lockrow(text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.lockrow(text, text, text) TO head_lab;


--
-- Name: FUNCTION lockrow(text, text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.lockrow(text, text, text, text) TO head_lab;


--
-- Name: FUNCTION lockrow(text, text, text, timestamp without time zone); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.lockrow(text, text, text, timestamp without time zone) TO head_lab;


--
-- Name: FUNCTION lockrow(text, text, text, text, timestamp without time zone); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.lockrow(text, text, text, text, timestamp without time zone) TO head_lab;


--
-- Name: FUNCTION longtransactionsenabled(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.longtransactionsenabled() TO head_lab;


--
-- Name: FUNCTION overlaps_2d(public.box2df, public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_2d(public.box2df, public.box2df) TO head_lab;


--
-- Name: FUNCTION overlaps_2d(public.box2df, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_2d(public.box2df, public.geometry) TO head_lab;


--
-- Name: FUNCTION overlaps_2d(public.geometry, public.box2df); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_2d(public.geometry, public.box2df) TO head_lab;


--
-- Name: FUNCTION overlaps_geog(public.geography, public.gidx); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_geog(public.geography, public.gidx) TO head_lab;


--
-- Name: FUNCTION overlaps_geog(public.gidx, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_geog(public.gidx, public.geography) TO head_lab;


--
-- Name: FUNCTION overlaps_geog(public.gidx, public.gidx); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_geog(public.gidx, public.gidx) TO head_lab;


--
-- Name: FUNCTION overlaps_nd(public.geometry, public.gidx); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_nd(public.geometry, public.gidx) TO head_lab;


--
-- Name: FUNCTION overlaps_nd(public.gidx, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_nd(public.gidx, public.geometry) TO head_lab;


--
-- Name: FUNCTION overlaps_nd(public.gidx, public.gidx); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.overlaps_nd(public.gidx, public.gidx) TO head_lab;


--
-- Name: FUNCTION pgis_asflatgeobuf_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asflatgeobuf_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_asflatgeobuf_transfn(internal, anyelement); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asflatgeobuf_transfn(internal, anyelement) TO head_lab;


--
-- Name: FUNCTION pgis_asflatgeobuf_transfn(internal, anyelement, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asflatgeobuf_transfn(internal, anyelement, boolean) TO head_lab;


--
-- Name: FUNCTION pgis_asflatgeobuf_transfn(internal, anyelement, boolean, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asflatgeobuf_transfn(internal, anyelement, boolean, text) TO head_lab;


--
-- Name: FUNCTION pgis_asgeobuf_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asgeobuf_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_asgeobuf_transfn(internal, anyelement); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asgeobuf_transfn(internal, anyelement) TO head_lab;


--
-- Name: FUNCTION pgis_asgeobuf_transfn(internal, anyelement, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asgeobuf_transfn(internal, anyelement, text) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_combinefn(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_combinefn(internal, internal) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_deserialfn(bytea, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_deserialfn(bytea, internal) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_serialfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_serialfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_transfn(internal, anyelement) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text, integer) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text, integer, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text, integer, text) TO head_lab;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text, integer, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text, integer, text, text) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_accum_transfn(internal, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_accum_transfn(internal, public.geometry) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_accum_transfn(internal, public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_accum_transfn(internal, public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_accum_transfn(internal, public.geometry, double precision, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_accum_transfn(internal, public.geometry, double precision, integer) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_clusterintersecting_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_clusterintersecting_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_clusterwithin_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_clusterwithin_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_collect_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_collect_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_makeline_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_makeline_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_polygonize_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_polygonize_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_union_parallel_combinefn(internal, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_union_parallel_combinefn(internal, internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_union_parallel_deserialfn(bytea, internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_union_parallel_deserialfn(bytea, internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_union_parallel_finalfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_union_parallel_finalfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_union_parallel_serialfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_union_parallel_serialfn(internal) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_union_parallel_transfn(internal, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_union_parallel_transfn(internal, public.geometry) TO head_lab;


--
-- Name: FUNCTION pgis_geometry_union_parallel_transfn(internal, public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgis_geometry_union_parallel_transfn(internal, public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_armor_headers(text, OUT key text, OUT value text) TO head_lab;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_key_id(bytea) TO head_lab;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt(bytea, bytea) TO head_lab;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt(bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt(bytea, bytea, text, text) TO head_lab;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea) TO head_lab;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO head_lab;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt(text, bytea) TO head_lab;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt(text, bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea) TO head_lab;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt(bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt(bytea, text, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt_bytea(bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_decrypt_bytea(bytea, text, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt(text, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt(text, text, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt_bytea(bytea, text) TO head_lab;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.pgp_sym_encrypt_bytea(bytea, text, text) TO head_lab;


--
-- Name: FUNCTION populate_geometry_columns(use_typmod boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.populate_geometry_columns(use_typmod boolean) TO head_lab;


--
-- Name: FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO head_lab;


--
-- Name: FUNCTION postgis_addbbox(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_addbbox(public.geometry) TO head_lab;


--
-- Name: FUNCTION postgis_cache_bbox(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_cache_bbox() TO head_lab;


--
-- Name: FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO head_lab;


--
-- Name: FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO head_lab;


--
-- Name: FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO head_lab;


--
-- Name: FUNCTION postgis_dropbbox(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_dropbbox(public.geometry) TO head_lab;


--
-- Name: FUNCTION postgis_extensions_upgrade(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_extensions_upgrade() TO head_lab;


--
-- Name: FUNCTION postgis_full_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_full_version() TO head_lab;


--
-- Name: FUNCTION postgis_geos_noop(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_geos_noop(public.geometry) TO head_lab;


--
-- Name: FUNCTION postgis_geos_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_geos_version() TO head_lab;


--
-- Name: FUNCTION postgis_getbbox(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_getbbox(public.geometry) TO head_lab;


--
-- Name: FUNCTION postgis_hasbbox(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_hasbbox(public.geometry) TO head_lab;


--
-- Name: FUNCTION postgis_index_supportfn(internal); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_index_supportfn(internal) TO head_lab;


--
-- Name: FUNCTION postgis_lib_build_date(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_lib_build_date() TO head_lab;


--
-- Name: FUNCTION postgis_lib_revision(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_lib_revision() TO head_lab;


--
-- Name: FUNCTION postgis_lib_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_lib_version() TO head_lab;


--
-- Name: FUNCTION postgis_libjson_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_libjson_version() TO head_lab;


--
-- Name: FUNCTION postgis_liblwgeom_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_liblwgeom_version() TO head_lab;


--
-- Name: FUNCTION postgis_libprotobuf_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_libprotobuf_version() TO head_lab;


--
-- Name: FUNCTION postgis_libxml_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_libxml_version() TO head_lab;


--
-- Name: FUNCTION postgis_noop(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_noop(public.geometry) TO head_lab;


--
-- Name: FUNCTION postgis_proj_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_proj_version() TO head_lab;


--
-- Name: FUNCTION postgis_scripts_build_date(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_scripts_build_date() TO head_lab;


--
-- Name: FUNCTION postgis_scripts_installed(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_scripts_installed() TO head_lab;


--
-- Name: FUNCTION postgis_scripts_released(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_scripts_released() TO head_lab;


--
-- Name: FUNCTION postgis_svn_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_svn_version() TO head_lab;


--
-- Name: FUNCTION postgis_transform_geometry(geom public.geometry, text, text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_transform_geometry(geom public.geometry, text, text, integer) TO head_lab;


--
-- Name: FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO head_lab;


--
-- Name: FUNCTION postgis_typmod_dims(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_typmod_dims(integer) TO head_lab;


--
-- Name: FUNCTION postgis_typmod_srid(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_typmod_srid(integer) TO head_lab;


--
-- Name: FUNCTION postgis_typmod_type(integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_typmod_type(integer) TO head_lab;


--
-- Name: FUNCTION postgis_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_version() TO head_lab;


--
-- Name: FUNCTION postgis_wagyu_version(); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.postgis_wagyu_version() TO head_lab;


--
-- Name: PROCEDURE remove_collection(IN col_id integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON PROCEDURE public.remove_collection(IN col_id integer) TO lab_worker;
GRANT ALL ON PROCEDURE public.remove_collection(IN col_id integer) TO head_lab;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.sign(payload json, secret text, algorithm text) TO head_lab;


--
-- Name: FUNCTION st_3dclosestpoint(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dclosestpoint(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3ddfullywithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3ddfullywithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_3ddistance(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3ddistance(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3ddwithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3ddwithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_3dintersects(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dintersects(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3dlength(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dlength(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3dlineinterpolatepoint(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dlineinterpolatepoint(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_3dlongestline(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dlongestline(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3dmakebox(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dmakebox(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3dmaxdistance(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dmaxdistance(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3dperimeter(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dperimeter(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_3dshortestline(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dshortestline(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_addmeasure(public.geometry, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_addmeasure(public.geometry, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_addpoint(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_addpoint(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_addpoint(geom1 public.geometry, geom2 public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_addpoint(geom1 public.geometry, geom2 public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_angle(line1 public.geometry, line2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_angle(line1 public.geometry, line2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_angle(pt1 public.geometry, pt2 public.geometry, pt3 public.geometry, pt4 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_angle(pt1 public.geometry, pt2 public.geometry, pt3 public.geometry, pt4 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_area(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_area(text) TO head_lab;


--
-- Name: FUNCTION st_area(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_area(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_area(geog public.geography, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_area(geog public.geography, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION st_area2d(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_area2d(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_asbinary(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asbinary(public.geography) TO head_lab;


--
-- Name: FUNCTION st_asbinary(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asbinary(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_asbinary(public.geography, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asbinary(public.geography, text) TO head_lab;


--
-- Name: FUNCTION st_asbinary(public.geometry, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asbinary(public.geometry, text) TO head_lab;


--
-- Name: FUNCTION st_asencodedpolyline(geom public.geometry, nprecision integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asencodedpolyline(geom public.geometry, nprecision integer) TO head_lab;


--
-- Name: FUNCTION st_asewkb(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkb(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_asewkb(public.geometry, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkb(public.geometry, text) TO head_lab;


--
-- Name: FUNCTION st_asewkt(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkt(text) TO head_lab;


--
-- Name: FUNCTION st_asewkt(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkt(public.geography) TO head_lab;


--
-- Name: FUNCTION st_asewkt(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkt(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_asewkt(public.geography, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkt(public.geography, integer) TO head_lab;


--
-- Name: FUNCTION st_asewkt(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asewkt(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_asgeojson(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgeojson(text) TO head_lab;


--
-- Name: FUNCTION st_asgeojson(geog public.geography, maxdecimaldigits integer, options integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgeojson(geog public.geography, maxdecimaldigits integer, options integer) TO head_lab;


--
-- Name: FUNCTION st_asgeojson(geom public.geometry, maxdecimaldigits integer, options integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgeojson(geom public.geometry, maxdecimaldigits integer, options integer) TO head_lab;


--
-- Name: FUNCTION st_asgeojson(r record, geom_column text, maxdecimaldigits integer, pretty_bool boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgeojson(r record, geom_column text, maxdecimaldigits integer, pretty_bool boolean) TO head_lab;


--
-- Name: FUNCTION st_asgml(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgml(text) TO head_lab;


--
-- Name: FUNCTION st_asgml(geom public.geometry, maxdecimaldigits integer, options integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgml(geom public.geometry, maxdecimaldigits integer, options integer) TO head_lab;


--
-- Name: FUNCTION st_asgml(geog public.geography, maxdecimaldigits integer, options integer, nprefix text, id text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgml(geog public.geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO head_lab;


--
-- Name: FUNCTION st_asgml(version integer, geog public.geography, maxdecimaldigits integer, options integer, nprefix text, id text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgml(version integer, geog public.geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO head_lab;


--
-- Name: FUNCTION st_asgml(version integer, geom public.geometry, maxdecimaldigits integer, options integer, nprefix text, id text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgml(version integer, geom public.geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO head_lab;


--
-- Name: FUNCTION st_ashexewkb(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ashexewkb(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_ashexewkb(public.geometry, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ashexewkb(public.geometry, text) TO head_lab;


--
-- Name: FUNCTION st_askml(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_askml(text) TO head_lab;


--
-- Name: FUNCTION st_askml(geog public.geography, maxdecimaldigits integer, nprefix text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_askml(geog public.geography, maxdecimaldigits integer, nprefix text) TO head_lab;


--
-- Name: FUNCTION st_askml(geom public.geometry, maxdecimaldigits integer, nprefix text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_askml(geom public.geometry, maxdecimaldigits integer, nprefix text) TO head_lab;


--
-- Name: FUNCTION st_aslatlontext(geom public.geometry, tmpl text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_aslatlontext(geom public.geometry, tmpl text) TO head_lab;


--
-- Name: FUNCTION st_asmarc21(geom public.geometry, format text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmarc21(geom public.geometry, format text) TO head_lab;


--
-- Name: FUNCTION st_asmvtgeom(geom public.geometry, bounds public.box2d, extent integer, buffer integer, clip_geom boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmvtgeom(geom public.geometry, bounds public.box2d, extent integer, buffer integer, clip_geom boolean) TO head_lab;


--
-- Name: FUNCTION st_assvg(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_assvg(text) TO head_lab;


--
-- Name: FUNCTION st_assvg(geog public.geography, rel integer, maxdecimaldigits integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_assvg(geog public.geography, rel integer, maxdecimaldigits integer) TO head_lab;


--
-- Name: FUNCTION st_assvg(geom public.geometry, rel integer, maxdecimaldigits integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_assvg(geom public.geometry, rel integer, maxdecimaldigits integer) TO head_lab;


--
-- Name: FUNCTION st_astext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astext(text) TO head_lab;


--
-- Name: FUNCTION st_astext(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astext(public.geography) TO head_lab;


--
-- Name: FUNCTION st_astext(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astext(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_astext(public.geography, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astext(public.geography, integer) TO head_lab;


--
-- Name: FUNCTION st_astext(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astext(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_astwkb(geom public.geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astwkb(geom public.geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO head_lab;


--
-- Name: FUNCTION st_astwkb(geom public.geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_astwkb(geom public.geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO head_lab;


--
-- Name: FUNCTION st_asx3d(geom public.geometry, maxdecimaldigits integer, options integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asx3d(geom public.geometry, maxdecimaldigits integer, options integer) TO head_lab;


--
-- Name: FUNCTION st_azimuth(geog1 public.geography, geog2 public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_azimuth(geog1 public.geography, geog2 public.geography) TO head_lab;


--
-- Name: FUNCTION st_azimuth(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_azimuth(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_bdmpolyfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_bdmpolyfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_bdpolyfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_bdpolyfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_boundary(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_boundary(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_boundingdiagonal(geom public.geometry, fits boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_boundingdiagonal(geom public.geometry, fits boolean) TO head_lab;


--
-- Name: FUNCTION st_box2dfromgeohash(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_box2dfromgeohash(text, integer) TO head_lab;


--
-- Name: FUNCTION st_buffer(text, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(text, double precision) TO head_lab;


--
-- Name: FUNCTION st_buffer(public.geography, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(public.geography, double precision) TO head_lab;


--
-- Name: FUNCTION st_buffer(text, double precision, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(text, double precision, integer) TO head_lab;


--
-- Name: FUNCTION st_buffer(text, double precision, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(text, double precision, text) TO head_lab;


--
-- Name: FUNCTION st_buffer(public.geography, double precision, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(public.geography, double precision, integer) TO head_lab;


--
-- Name: FUNCTION st_buffer(public.geography, double precision, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(public.geography, double precision, text) TO head_lab;


--
-- Name: FUNCTION st_buffer(geom public.geometry, radius double precision, quadsegs integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(geom public.geometry, radius double precision, quadsegs integer) TO head_lab;


--
-- Name: FUNCTION st_buffer(geom public.geometry, radius double precision, options text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buffer(geom public.geometry, radius double precision, options text) TO head_lab;


--
-- Name: FUNCTION st_buildarea(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_buildarea(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_centroid(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_centroid(text) TO head_lab;


--
-- Name: FUNCTION st_centroid(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_centroid(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_centroid(public.geography, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_centroid(public.geography, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION st_chaikinsmoothing(public.geometry, integer, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_chaikinsmoothing(public.geometry, integer, boolean) TO head_lab;


--
-- Name: FUNCTION st_cleangeometry(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_cleangeometry(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_clipbybox2d(geom public.geometry, box public.box2d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clipbybox2d(geom public.geometry, box public.box2d) TO head_lab;


--
-- Name: FUNCTION st_closestpoint(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_closestpoint(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_closestpointofapproach(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_closestpointofapproach(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_clusterdbscan(public.geometry, eps double precision, minpoints integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clusterdbscan(public.geometry, eps double precision, minpoints integer) TO head_lab;


--
-- Name: FUNCTION st_clusterintersecting(public.geometry[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clusterintersecting(public.geometry[]) TO head_lab;


--
-- Name: FUNCTION st_clusterkmeans(geom public.geometry, k integer, max_radius double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clusterkmeans(geom public.geometry, k integer, max_radius double precision) TO head_lab;


--
-- Name: FUNCTION st_clusterwithin(public.geometry[], double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clusterwithin(public.geometry[], double precision) TO head_lab;


--
-- Name: FUNCTION st_collect(public.geometry[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_collect(public.geometry[]) TO head_lab;


--
-- Name: FUNCTION st_collect(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_collect(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_collectionextract(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_collectionextract(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_collectionextract(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_collectionextract(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_collectionhomogenize(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_collectionhomogenize(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_combinebbox(public.box2d, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_combinebbox(public.box2d, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_combinebbox(public.box3d, public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_combinebbox(public.box3d, public.box3d) TO head_lab;


--
-- Name: FUNCTION st_combinebbox(public.box3d, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_combinebbox(public.box3d, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_concavehull(param_geom public.geometry, param_pctconvex double precision, param_allow_holes boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_concavehull(param_geom public.geometry, param_pctconvex double precision, param_allow_holes boolean) TO head_lab;


--
-- Name: FUNCTION st_contains(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_contains(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_containsproperly(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_containsproperly(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_convexhull(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_convexhull(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_coorddim(geometry public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_coorddim(geometry public.geometry) TO head_lab;


--
-- Name: FUNCTION st_coveredby(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_coveredby(text, text) TO head_lab;


--
-- Name: FUNCTION st_coveredby(geog1 public.geography, geog2 public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_coveredby(geog1 public.geography, geog2 public.geography) TO head_lab;


--
-- Name: FUNCTION st_coveredby(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_coveredby(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_covers(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_covers(text, text) TO head_lab;


--
-- Name: FUNCTION st_covers(geog1 public.geography, geog2 public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_covers(geog1 public.geography, geog2 public.geography) TO head_lab;


--
-- Name: FUNCTION st_covers(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_covers(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_cpawithin(public.geometry, public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_cpawithin(public.geometry, public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_crosses(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_crosses(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_curvetoline(geom public.geometry, tol double precision, toltype integer, flags integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_curvetoline(geom public.geometry, tol double precision, toltype integer, flags integer) TO head_lab;


--
-- Name: FUNCTION st_delaunaytriangles(g1 public.geometry, tolerance double precision, flags integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_delaunaytriangles(g1 public.geometry, tolerance double precision, flags integer) TO head_lab;


--
-- Name: FUNCTION st_dfullywithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dfullywithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_difference(geom1 public.geometry, geom2 public.geometry, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_difference(geom1 public.geometry, geom2 public.geometry, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_dimension(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dimension(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_disjoint(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_disjoint(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_distance(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distance(text, text) TO head_lab;


--
-- Name: FUNCTION st_distance(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distance(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_distance(geog1 public.geography, geog2 public.geography, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distance(geog1 public.geography, geog2 public.geography, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION st_distancecpa(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distancecpa(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_distancesphere(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distancesphere(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_distancesphere(geom1 public.geometry, geom2 public.geometry, radius double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distancesphere(geom1 public.geometry, geom2 public.geometry, radius double precision) TO head_lab;


--
-- Name: FUNCTION st_distancespheroid(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distancespheroid(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_distancespheroid(geom1 public.geometry, geom2 public.geometry, public.spheroid); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_distancespheroid(geom1 public.geometry, geom2 public.geometry, public.spheroid) TO head_lab;


--
-- Name: FUNCTION st_dump(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dump(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_dumppoints(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dumppoints(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_dumprings(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dumprings(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_dumpsegments(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dumpsegments(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_dwithin(text, text, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dwithin(text, text, double precision) TO head_lab;


--
-- Name: FUNCTION st_dwithin(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dwithin(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_dwithin(geog1 public.geography, geog2 public.geography, tolerance double precision, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_dwithin(geog1 public.geography, geog2 public.geography, tolerance double precision, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION st_endpoint(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_endpoint(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_envelope(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_envelope(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_equals(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_equals(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_estimatedextent(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_estimatedextent(text, text) TO head_lab;


--
-- Name: FUNCTION st_estimatedextent(text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_estimatedextent(text, text, text) TO head_lab;


--
-- Name: FUNCTION st_estimatedextent(text, text, text, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_estimatedextent(text, text, text, boolean) TO head_lab;


--
-- Name: FUNCTION st_expand(public.box2d, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_expand(public.box2d, double precision) TO head_lab;


--
-- Name: FUNCTION st_expand(public.box3d, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_expand(public.box3d, double precision) TO head_lab;


--
-- Name: FUNCTION st_expand(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_expand(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_expand(box public.box2d, dx double precision, dy double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_expand(box public.box2d, dx double precision, dy double precision) TO head_lab;


--
-- Name: FUNCTION st_expand(box public.box3d, dx double precision, dy double precision, dz double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_expand(box public.box3d, dx double precision, dy double precision, dz double precision) TO head_lab;


--
-- Name: FUNCTION st_expand(geom public.geometry, dx double precision, dy double precision, dz double precision, dm double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_expand(geom public.geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO head_lab;


--
-- Name: FUNCTION st_exteriorring(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_exteriorring(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_filterbym(public.geometry, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_filterbym(public.geometry, double precision, double precision, boolean) TO head_lab;


--
-- Name: FUNCTION st_findextent(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_findextent(text, text) TO head_lab;


--
-- Name: FUNCTION st_findextent(text, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_findextent(text, text, text) TO head_lab;


--
-- Name: FUNCTION st_flipcoordinates(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_flipcoordinates(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_force2d(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_force2d(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_force3d(geom public.geometry, zvalue double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_force3d(geom public.geometry, zvalue double precision) TO head_lab;


--
-- Name: FUNCTION st_force3dm(geom public.geometry, mvalue double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_force3dm(geom public.geometry, mvalue double precision) TO head_lab;


--
-- Name: FUNCTION st_force3dz(geom public.geometry, zvalue double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_force3dz(geom public.geometry, zvalue double precision) TO head_lab;


--
-- Name: FUNCTION st_force4d(geom public.geometry, zvalue double precision, mvalue double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_force4d(geom public.geometry, zvalue double precision, mvalue double precision) TO head_lab;


--
-- Name: FUNCTION st_forcecollection(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcecollection(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_forcecurve(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcecurve(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_forcepolygonccw(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcepolygonccw(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_forcepolygoncw(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcepolygoncw(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_forcerhr(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcerhr(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_forcesfs(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcesfs(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_forcesfs(public.geometry, version text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_forcesfs(public.geometry, version text) TO head_lab;


--
-- Name: FUNCTION st_frechetdistance(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_frechetdistance(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_fromflatgeobuf(anyelement, bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_fromflatgeobuf(anyelement, bytea) TO head_lab;


--
-- Name: FUNCTION st_fromflatgeobuftotable(text, text, bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_fromflatgeobuftotable(text, text, bytea) TO head_lab;


--
-- Name: FUNCTION st_generatepoints(area public.geometry, npoints integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_generatepoints(area public.geometry, npoints integer) TO head_lab;


--
-- Name: FUNCTION st_generatepoints(area public.geometry, npoints integer, seed integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_generatepoints(area public.geometry, npoints integer, seed integer) TO head_lab;


--
-- Name: FUNCTION st_geogfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geogfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_geogfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geogfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_geographyfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geographyfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_geohash(geog public.geography, maxchars integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geohash(geog public.geography, maxchars integer) TO head_lab;


--
-- Name: FUNCTION st_geohash(geom public.geometry, maxchars integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geohash(geom public.geometry, maxchars integer) TO head_lab;


--
-- Name: FUNCTION st_geomcollfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomcollfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_geomcollfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomcollfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_geomcollfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomcollfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_geomcollfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomcollfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_geometricmedian(g public.geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geometricmedian(g public.geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO head_lab;


--
-- Name: FUNCTION st_geometryfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geometryfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_geometryfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geometryfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_geometryn(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geometryn(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_geometrytype(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geometrytype(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_geomfromewkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromewkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_geomfromewkt(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromewkt(text) TO head_lab;


--
-- Name: FUNCTION st_geomfromgeohash(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromgeohash(text, integer) TO head_lab;


--
-- Name: FUNCTION st_geomfromgeojson(json); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromgeojson(json) TO head_lab;


--
-- Name: FUNCTION st_geomfromgeojson(jsonb); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromgeojson(jsonb) TO head_lab;


--
-- Name: FUNCTION st_geomfromgeojson(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromgeojson(text) TO head_lab;


--
-- Name: FUNCTION st_geomfromgml(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromgml(text) TO head_lab;


--
-- Name: FUNCTION st_geomfromgml(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromgml(text, integer) TO head_lab;


--
-- Name: FUNCTION st_geomfromkml(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromkml(text) TO head_lab;


--
-- Name: FUNCTION st_geomfrommarc21(marc21xml text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfrommarc21(marc21xml text) TO head_lab;


--
-- Name: FUNCTION st_geomfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_geomfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_geomfromtwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromtwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_geomfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_geomfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_geomfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_gmltosql(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_gmltosql(text) TO head_lab;


--
-- Name: FUNCTION st_gmltosql(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_gmltosql(text, integer) TO head_lab;


--
-- Name: FUNCTION st_hasarc(geometry public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_hasarc(geometry public.geometry) TO head_lab;


--
-- Name: FUNCTION st_hausdorffdistance(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_hausdorffdistance(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_hausdorffdistance(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_hausdorffdistance(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_hexagon(size double precision, cell_i integer, cell_j integer, origin public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_hexagon(size double precision, cell_i integer, cell_j integer, origin public.geometry) TO head_lab;


--
-- Name: FUNCTION st_hexagongrid(size double precision, bounds public.geometry, OUT geom public.geometry, OUT i integer, OUT j integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_hexagongrid(size double precision, bounds public.geometry, OUT geom public.geometry, OUT i integer, OUT j integer) TO head_lab;


--
-- Name: FUNCTION st_interiorringn(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_interiorringn(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_interpolatepoint(line public.geometry, point public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_interpolatepoint(line public.geometry, point public.geometry) TO head_lab;


--
-- Name: FUNCTION st_intersection(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_intersection(text, text) TO head_lab;


--
-- Name: FUNCTION st_intersection(public.geography, public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_intersection(public.geography, public.geography) TO head_lab;


--
-- Name: FUNCTION st_intersection(geom1 public.geometry, geom2 public.geometry, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_intersection(geom1 public.geometry, geom2 public.geometry, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_intersects(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_intersects(text, text) TO head_lab;


--
-- Name: FUNCTION st_intersects(geog1 public.geography, geog2 public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_intersects(geog1 public.geography, geog2 public.geography) TO head_lab;


--
-- Name: FUNCTION st_intersects(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_intersects(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_isclosed(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isclosed(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_iscollection(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_iscollection(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_isempty(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isempty(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_ispolygonccw(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ispolygonccw(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_ispolygoncw(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ispolygoncw(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_isring(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isring(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_issimple(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_issimple(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_isvalid(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isvalid(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_isvalid(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isvalid(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_isvaliddetail(geom public.geometry, flags integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isvaliddetail(geom public.geometry, flags integer) TO head_lab;


--
-- Name: FUNCTION st_isvalidreason(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isvalidreason(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_isvalidreason(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isvalidreason(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_isvalidtrajectory(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_isvalidtrajectory(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_length(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_length(text) TO head_lab;


--
-- Name: FUNCTION st_length(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_length(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_length(geog public.geography, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_length(geog public.geography, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION st_length2d(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_length2d(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_length2dspheroid(public.geometry, public.spheroid); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_length2dspheroid(public.geometry, public.spheroid) TO head_lab;


--
-- Name: FUNCTION st_lengthspheroid(public.geometry, public.spheroid); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_lengthspheroid(public.geometry, public.spheroid) TO head_lab;


--
-- Name: FUNCTION st_letters(letters text, font json); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_letters(letters text, font json) TO head_lab;


--
-- Name: FUNCTION st_linecrossingdirection(line1 public.geometry, line2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linecrossingdirection(line1 public.geometry, line2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_linefromencodedpolyline(txtin text, nprecision integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linefromencodedpolyline(txtin text, nprecision integer) TO head_lab;


--
-- Name: FUNCTION st_linefrommultipoint(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linefrommultipoint(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_linefromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linefromtext(text) TO head_lab;


--
-- Name: FUNCTION st_linefromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linefromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_linefromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linefromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_linefromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linefromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_lineinterpolatepoint(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_lineinterpolatepoint(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_lineinterpolatepoints(public.geometry, double precision, repeat boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_lineinterpolatepoints(public.geometry, double precision, repeat boolean) TO head_lab;


--
-- Name: FUNCTION st_linelocatepoint(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linelocatepoint(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_linemerge(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linemerge(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_linemerge(public.geometry, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linemerge(public.geometry, boolean) TO head_lab;


--
-- Name: FUNCTION st_linestringfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linestringfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_linestringfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linestringfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_linesubstring(public.geometry, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linesubstring(public.geometry, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_linetocurve(geometry public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_linetocurve(geometry public.geometry) TO head_lab;


--
-- Name: FUNCTION st_locatealong(geometry public.geometry, measure double precision, leftrightoffset double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_locatealong(geometry public.geometry, measure double precision, leftrightoffset double precision) TO head_lab;


--
-- Name: FUNCTION st_locatebetween(geometry public.geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_locatebetween(geometry public.geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO head_lab;


--
-- Name: FUNCTION st_locatebetweenelevations(geometry public.geometry, fromelevation double precision, toelevation double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_locatebetweenelevations(geometry public.geometry, fromelevation double precision, toelevation double precision) TO head_lab;


--
-- Name: FUNCTION st_longestline(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_longestline(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_m(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_m(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_makebox2d(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makebox2d(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO head_lab;


--
-- Name: FUNCTION st_makeline(public.geometry[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makeline(public.geometry[]) TO head_lab;


--
-- Name: FUNCTION st_makeline(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makeline(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_makepoint(double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makepoint(double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makepoint(double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makepoint(double precision, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_makepointm(double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makepointm(double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_makepolygon(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makepolygon(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_makepolygon(public.geometry, public.geometry[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makepolygon(public.geometry, public.geometry[]) TO head_lab;


--
-- Name: FUNCTION st_makevalid(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makevalid(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_makevalid(geom public.geometry, params text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makevalid(geom public.geometry, params text) TO head_lab;


--
-- Name: FUNCTION st_maxdistance(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_maxdistance(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_maximuminscribedcircle(public.geometry, OUT center public.geometry, OUT nearest public.geometry, OUT radius double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_maximuminscribedcircle(public.geometry, OUT center public.geometry, OUT nearest public.geometry, OUT radius double precision) TO head_lab;


--
-- Name: FUNCTION st_memsize(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_memsize(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_minimumboundingcircle(inputgeom public.geometry, segs_per_quarter integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_minimumboundingcircle(inputgeom public.geometry, segs_per_quarter integer) TO head_lab;


--
-- Name: FUNCTION st_minimumboundingradius(public.geometry, OUT center public.geometry, OUT radius double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_minimumboundingradius(public.geometry, OUT center public.geometry, OUT radius double precision) TO head_lab;


--
-- Name: FUNCTION st_minimumclearance(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_minimumclearance(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_minimumclearanceline(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_minimumclearanceline(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_mlinefromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mlinefromtext(text) TO head_lab;


--
-- Name: FUNCTION st_mlinefromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mlinefromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_mlinefromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mlinefromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_mlinefromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mlinefromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_mpointfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpointfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_mpointfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpointfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_mpointfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpointfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_mpointfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpointfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_mpolyfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpolyfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_mpolyfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpolyfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_mpolyfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpolyfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_mpolyfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_mpolyfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_multi(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multi(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_multilinefromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multilinefromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_multilinestringfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multilinestringfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_multilinestringfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multilinestringfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_multipointfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipointfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_multipointfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipointfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_multipointfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipointfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_multipolyfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipolyfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_multipolyfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipolyfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_multipolygonfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipolygonfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_multipolygonfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_multipolygonfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_ndims(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ndims(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_node(g public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_node(g public.geometry) TO head_lab;


--
-- Name: FUNCTION st_normalize(geom public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_normalize(geom public.geometry) TO head_lab;


--
-- Name: FUNCTION st_npoints(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_npoints(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_nrings(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_nrings(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_numgeometries(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_numgeometries(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_numinteriorring(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_numinteriorring(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_numinteriorrings(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_numinteriorrings(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_numpatches(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_numpatches(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_numpoints(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_numpoints(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_offsetcurve(line public.geometry, distance double precision, params text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_offsetcurve(line public.geometry, distance double precision, params text) TO head_lab;


--
-- Name: FUNCTION st_orderingequals(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_orderingequals(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_orientedenvelope(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_orientedenvelope(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_overlaps(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_overlaps(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_patchn(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_patchn(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_perimeter(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_perimeter(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_perimeter(geog public.geography, use_spheroid boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_perimeter(geog public.geography, use_spheroid boolean) TO head_lab;


--
-- Name: FUNCTION st_perimeter2d(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_perimeter2d(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_point(double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_point(double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_point(double precision, double precision, srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_point(double precision, double precision, srid integer) TO head_lab;


--
-- Name: FUNCTION st_pointfromgeohash(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointfromgeohash(text, integer) TO head_lab;


--
-- Name: FUNCTION st_pointfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_pointfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_pointfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_pointfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_pointinsidecircle(public.geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointinsidecircle(public.geometry, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_pointm(xcoordinate double precision, ycoordinate double precision, mcoordinate double precision, srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointm(xcoordinate double precision, ycoordinate double precision, mcoordinate double precision, srid integer) TO head_lab;


--
-- Name: FUNCTION st_pointn(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointn(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_pointonsurface(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointonsurface(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_points(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_points(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_pointz(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointz(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, srid integer) TO head_lab;


--
-- Name: FUNCTION st_pointzm(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, mcoordinate double precision, srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_pointzm(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, mcoordinate double precision, srid integer) TO head_lab;


--
-- Name: FUNCTION st_polyfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polyfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_polyfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polyfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_polyfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polyfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_polyfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polyfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_polygon(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygon(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_polygonfromtext(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygonfromtext(text) TO head_lab;


--
-- Name: FUNCTION st_polygonfromtext(text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygonfromtext(text, integer) TO head_lab;


--
-- Name: FUNCTION st_polygonfromwkb(bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygonfromwkb(bytea) TO head_lab;


--
-- Name: FUNCTION st_polygonfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygonfromwkb(bytea, integer) TO head_lab;


--
-- Name: FUNCTION st_polygonize(public.geometry[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygonize(public.geometry[]) TO head_lab;


--
-- Name: FUNCTION st_project(geog public.geography, distance double precision, azimuth double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_project(geog public.geography, distance double precision, azimuth double precision) TO head_lab;


--
-- Name: FUNCTION st_quantizecoordinates(g public.geometry, prec_x integer, prec_y integer, prec_z integer, prec_m integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_quantizecoordinates(g public.geometry, prec_x integer, prec_y integer, prec_z integer, prec_m integer) TO head_lab;


--
-- Name: FUNCTION st_reduceprecision(geom public.geometry, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_reduceprecision(geom public.geometry, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_relate(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_relate(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_relate(geom1 public.geometry, geom2 public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_relate(geom1 public.geometry, geom2 public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_relate(geom1 public.geometry, geom2 public.geometry, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_relate(geom1 public.geometry, geom2 public.geometry, text) TO head_lab;


--
-- Name: FUNCTION st_relatematch(text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_relatematch(text, text) TO head_lab;


--
-- Name: FUNCTION st_removepoint(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_removepoint(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_removerepeatedpoints(geom public.geometry, tolerance double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_removerepeatedpoints(geom public.geometry, tolerance double precision) TO head_lab;


--
-- Name: FUNCTION st_reverse(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_reverse(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_rotate(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_rotate(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_rotate(public.geometry, double precision, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_rotate(public.geometry, double precision, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_rotate(public.geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_rotate(public.geometry, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_rotatex(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_rotatex(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_rotatey(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_rotatey(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_rotatez(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_rotatez(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_scale(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_scale(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_scale(public.geometry, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_scale(public.geometry, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_scale(public.geometry, public.geometry, origin public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_scale(public.geometry, public.geometry, origin public.geometry) TO head_lab;


--
-- Name: FUNCTION st_scale(public.geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_scale(public.geometry, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_scroll(public.geometry, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_scroll(public.geometry, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_segmentize(geog public.geography, max_segment_length double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_segmentize(geog public.geography, max_segment_length double precision) TO head_lab;


--
-- Name: FUNCTION st_segmentize(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_segmentize(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_seteffectivearea(public.geometry, double precision, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_seteffectivearea(public.geometry, double precision, integer) TO head_lab;


--
-- Name: FUNCTION st_setpoint(public.geometry, integer, public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_setpoint(public.geometry, integer, public.geometry) TO head_lab;


--
-- Name: FUNCTION st_setsrid(geog public.geography, srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_setsrid(geog public.geography, srid integer) TO head_lab;


--
-- Name: FUNCTION st_setsrid(geom public.geometry, srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_setsrid(geom public.geometry, srid integer) TO head_lab;


--
-- Name: FUNCTION st_sharedpaths(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_sharedpaths(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_shiftlongitude(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_shiftlongitude(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_shortestline(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_shortestline(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_simplify(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_simplify(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_simplify(public.geometry, double precision, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_simplify(public.geometry, double precision, boolean) TO head_lab;


--
-- Name: FUNCTION st_simplifypolygonhull(geom public.geometry, vertex_fraction double precision, is_outer boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_simplifypolygonhull(geom public.geometry, vertex_fraction double precision, is_outer boolean) TO head_lab;


--
-- Name: FUNCTION st_simplifypreservetopology(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_simplifypreservetopology(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_simplifyvw(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_simplifyvw(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_snap(geom1 public.geometry, geom2 public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_snap(geom1 public.geometry, geom2 public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_snaptogrid(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_snaptogrid(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_snaptogrid(public.geometry, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_snaptogrid(public.geometry, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_snaptogrid(public.geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_snaptogrid(public.geometry, double precision, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_snaptogrid(geom1 public.geometry, geom2 public.geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_snaptogrid(geom1 public.geometry, geom2 public.geometry, double precision, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_split(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_split(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_square(size double precision, cell_i integer, cell_j integer, origin public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_square(size double precision, cell_i integer, cell_j integer, origin public.geometry) TO head_lab;


--
-- Name: FUNCTION st_squaregrid(size double precision, bounds public.geometry, OUT geom public.geometry, OUT i integer, OUT j integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_squaregrid(size double precision, bounds public.geometry, OUT geom public.geometry, OUT i integer, OUT j integer) TO head_lab;


--
-- Name: FUNCTION st_srid(geog public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_srid(geog public.geography) TO head_lab;


--
-- Name: FUNCTION st_srid(geom public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_srid(geom public.geometry) TO head_lab;


--
-- Name: FUNCTION st_startpoint(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_startpoint(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_subdivide(geom public.geometry, maxvertices integer, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_subdivide(geom public.geometry, maxvertices integer, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_summary(public.geography); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_summary(public.geography) TO head_lab;


--
-- Name: FUNCTION st_summary(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_summary(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_swapordinates(geom public.geometry, ords cstring); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_swapordinates(geom public.geometry, ords cstring) TO head_lab;


--
-- Name: FUNCTION st_symdifference(geom1 public.geometry, geom2 public.geometry, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_symdifference(geom1 public.geometry, geom2 public.geometry, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_symmetricdifference(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_symmetricdifference(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_tileenvelope(zoom integer, x integer, y integer, bounds public.geometry, margin double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_tileenvelope(zoom integer, x integer, y integer, bounds public.geometry, margin double precision) TO head_lab;


--
-- Name: FUNCTION st_touches(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_touches(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_transform(public.geometry, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_transform(public.geometry, integer) TO head_lab;


--
-- Name: FUNCTION st_transform(geom public.geometry, to_proj text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_transform(geom public.geometry, to_proj text) TO head_lab;


--
-- Name: FUNCTION st_transform(geom public.geometry, from_proj text, to_srid integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_transform(geom public.geometry, from_proj text, to_srid integer) TO head_lab;


--
-- Name: FUNCTION st_transform(geom public.geometry, from_proj text, to_proj text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_transform(geom public.geometry, from_proj text, to_proj text) TO head_lab;


--
-- Name: FUNCTION st_translate(public.geometry, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_translate(public.geometry, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_translate(public.geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_translate(public.geometry, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_transscale(public.geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_transscale(public.geometry, double precision, double precision, double precision, double precision) TO head_lab;


--
-- Name: FUNCTION st_triangulatepolygon(g1 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_triangulatepolygon(g1 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_unaryunion(public.geometry, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_unaryunion(public.geometry, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_union(public.geometry[]); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_union(public.geometry[]) TO head_lab;


--
-- Name: FUNCTION st_union(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_union(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_union(geom1 public.geometry, geom2 public.geometry, gridsize double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_union(geom1 public.geometry, geom2 public.geometry, gridsize double precision) TO head_lab;


--
-- Name: FUNCTION st_voronoilines(g1 public.geometry, tolerance double precision, extend_to public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_voronoilines(g1 public.geometry, tolerance double precision, extend_to public.geometry) TO head_lab;


--
-- Name: FUNCTION st_voronoipolygons(g1 public.geometry, tolerance double precision, extend_to public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_voronoipolygons(g1 public.geometry, tolerance double precision, extend_to public.geometry) TO head_lab;


--
-- Name: FUNCTION st_within(geom1 public.geometry, geom2 public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_within(geom1 public.geometry, geom2 public.geometry) TO head_lab;


--
-- Name: FUNCTION st_wkbtosql(wkb bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_wkbtosql(wkb bytea) TO head_lab;


--
-- Name: FUNCTION st_wkttosql(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_wkttosql(text) TO head_lab;


--
-- Name: FUNCTION st_wrapx(geom public.geometry, wrap double precision, move double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_wrapx(geom public.geometry, wrap double precision, move double precision) TO head_lab;


--
-- Name: FUNCTION st_x(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_x(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_xmax(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_xmax(public.box3d) TO head_lab;


--
-- Name: FUNCTION st_xmin(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_xmin(public.box3d) TO head_lab;


--
-- Name: FUNCTION st_y(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_y(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_ymax(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ymax(public.box3d) TO head_lab;


--
-- Name: FUNCTION st_ymin(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_ymin(public.box3d) TO head_lab;


--
-- Name: FUNCTION st_z(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_z(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_zmax(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_zmax(public.box3d) TO head_lab;


--
-- Name: FUNCTION st_zmflag(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_zmflag(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_zmin(public.box3d); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_zmin(public.box3d) TO head_lab;


--
-- Name: FUNCTION test(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.test() TO lab_worker;
GRANT ALL ON FUNCTION public.test() TO head_lab;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.try_cast_double(inp text) TO head_lab;


--
-- Name: FUNCTION unlockrows(text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.unlockrows(text) TO head_lab;


--
-- Name: FUNCTION updategeometrysrid(character varying, character varying, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.updategeometrysrid(character varying, character varying, integer) TO head_lab;


--
-- Name: FUNCTION updategeometrysrid(character varying, character varying, character varying, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer) TO head_lab;


--
-- Name: FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO head_lab;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.url_decode(data text) TO head_lab;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.url_encode(data bytea) TO head_lab;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.verify(token text, secret text, algorithm text) TO head_lab;


--
-- Name: FUNCTION st_3dextent(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_3dextent(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_asflatgeobuf(anyelement); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asflatgeobuf(anyelement) TO head_lab;


--
-- Name: FUNCTION st_asflatgeobuf(anyelement, boolean); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asflatgeobuf(anyelement, boolean) TO head_lab;


--
-- Name: FUNCTION st_asflatgeobuf(anyelement, boolean, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asflatgeobuf(anyelement, boolean, text) TO head_lab;


--
-- Name: FUNCTION st_asgeobuf(anyelement); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgeobuf(anyelement) TO head_lab;


--
-- Name: FUNCTION st_asgeobuf(anyelement, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asgeobuf(anyelement, text) TO head_lab;


--
-- Name: FUNCTION st_asmvt(anyelement); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmvt(anyelement) TO head_lab;


--
-- Name: FUNCTION st_asmvt(anyelement, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmvt(anyelement, text) TO head_lab;


--
-- Name: FUNCTION st_asmvt(anyelement, text, integer); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmvt(anyelement, text, integer) TO head_lab;


--
-- Name: FUNCTION st_asmvt(anyelement, text, integer, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmvt(anyelement, text, integer, text) TO head_lab;


--
-- Name: FUNCTION st_asmvt(anyelement, text, integer, text, text); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_asmvt(anyelement, text, integer, text, text) TO head_lab;


--
-- Name: FUNCTION st_clusterintersecting(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clusterintersecting(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_clusterwithin(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_clusterwithin(public.geometry, double precision) TO head_lab;


--
-- Name: FUNCTION st_collect(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_collect(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_extent(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_extent(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_makeline(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_makeline(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_memcollect(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_memcollect(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_memunion(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_memunion(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_polygonize(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_polygonize(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_union(public.geometry); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_union(public.geometry) TO head_lab;


--
-- Name: FUNCTION st_union(public.geometry, double precision); Type: ACL; Schema: public; Owner: panksu
--

GRANT ALL ON FUNCTION public.st_union(public.geometry, double precision) TO head_lab;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE auth.users TO head_lab;


--
-- Name: TABLE age; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.age TO PUBLIC;
GRANT SELECT ON TABLE public.age TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.age TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.age TO head_lab;


--
-- Name: SEQUENCE age_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.age_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.age_id_seq TO head_lab;


--
-- Name: TABLE basic_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.basic_view TO web_anon;
GRANT INSERT,UPDATE ON TABLE public.basic_view TO lab_worker;


--
-- Name: TABLE collection; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.collection TO web_anon;
GRANT SELECT ON TABLE public.collection TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE public.collection TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.collection TO head_lab;


--
-- Name: SEQUENCE collection_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.collection_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.collection_id_seq TO head_lab;


--
-- Name: TABLE collector; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.collector TO PUBLIC;
GRANT SELECT ON TABLE public.collector TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.collector TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.collector TO head_lab;


--
-- Name: SEQUENCE collector_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.collector_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.collector_id_seq TO head_lab;


--
-- Name: TABLE collector_to_collection; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.collector_to_collection TO PUBLIC;
GRANT SELECT ON TABLE public.collector_to_collection TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.collector_to_collection TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.collector_to_collection TO head_lab;


--
-- Name: TABLE country; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.country TO PUBLIC;
GRANT SELECT ON TABLE public.country TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.country TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.country TO head_lab;


--
-- Name: SEQUENCE country_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.country_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.country_id_seq TO head_lab;


--
-- Name: TABLE family; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.family TO PUBLIC;
GRANT SELECT ON TABLE public.family TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.family TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.family TO head_lab;


--
-- Name: SEQUENCE family_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.family_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.family_id_seq TO head_lab;


--
-- Name: TABLE genus; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.genus TO PUBLIC;
GRANT SELECT ON TABLE public.genus TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.genus TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.genus TO head_lab;


--
-- Name: SEQUENCE genus_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.genus_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.genus_id_seq TO head_lab;


--
-- Name: TABLE geography_columns; Type: ACL; Schema: public; Owner: panksu
--

GRANT SELECT ON TABLE public.geography_columns TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.geography_columns TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.geography_columns TO head_lab;


--
-- Name: TABLE geometry_columns; Type: ACL; Schema: public; Owner: panksu
--

GRANT SELECT ON TABLE public.geometry_columns TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.geometry_columns TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.geometry_columns TO head_lab;


--
-- Name: TABLE kind; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.kind TO PUBLIC;
GRANT SELECT ON TABLE public.kind TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.kind TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.kind TO head_lab;


--
-- Name: SEQUENCE kind_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.kind_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.kind_id_seq TO head_lab;


--
-- Name: TABLE "order"; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public."order" TO PUBLIC;
GRANT SELECT ON TABLE public."order" TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public."order" TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public."order" TO head_lab;


--
-- Name: SEQUENCE order_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.order_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.order_id_seq TO head_lab;


--
-- Name: TABLE region; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.region TO PUBLIC;
GRANT SELECT ON TABLE public.region TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.region TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.region TO head_lab;


--
-- Name: SEQUENCE region_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.region_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.region_id_seq TO head_lab;


--
-- Name: TABLE sex; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.sex TO PUBLIC;
GRANT SELECT ON TABLE public.sex TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.sex TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sex TO head_lab;


--
-- Name: SEQUENCE sex_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.sex_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.sex_id_seq TO head_lab;


--
-- Name: TABLE spatial_ref_sys; Type: ACL; Schema: public; Owner: panksu
--

GRANT SELECT ON TABLE public.spatial_ref_sys TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.spatial_ref_sys TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.spatial_ref_sys TO head_lab;


--
-- Name: TABLE subregion; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.subregion TO PUBLIC;
GRANT SELECT ON TABLE public.subregion TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.subregion TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.subregion TO head_lab;


--
-- Name: SEQUENCE subregion_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.subregion_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.subregion_id_seq TO head_lab;


--
-- Name: TABLE voucher_institute; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT ON TABLE public.voucher_institute TO PUBLIC;
GRANT SELECT ON TABLE public.voucher_institute TO web_anon;
GRANT SELECT,INSERT,UPDATE ON TABLE public.voucher_institute TO lab_worker;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.voucher_institute TO head_lab;


--
-- Name: SEQUENCE voucher_institute_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.voucher_institute_id_seq TO lab_worker;
GRANT USAGE ON SEQUENCE public.voucher_institute_id_seq TO head_lab;


--
-- PostgreSQL database dump complete
--

